<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nnamm.work - Golang</title><link href="/" rel="alternate"/><link href="/feeds/golang.rss.xml" rel="self"/><id>/</id><updated>2022-06-16T23:00:00+09:00</updated><subtitle>portfolio note</subtitle><entry><title>Golang（Go言語）は懐かしくて馴染むプログラミング言語</title><link href="/posts/011-i-might-like-golang" rel="alternate"/><published>2022-06-16T23:00:00+09:00</published><updated>2022-06-16T23:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2022-06-16:/posts/011-i-might-like-golang</id><summary type="html">&lt;p&gt;僕は &lt;a href="https://note.com/tnnamm/m/m2aa9550047ed" target="_blank"&gt;note で写真素材を販売&lt;/a&gt;していて、写真データをサーバーに公開するときの一連作業を自動化するべく Python スクリプ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;僕は &lt;a href="https://note.com/tnnamm/m/m2aa9550047ed" target="_blank"&gt;note で写真素材を販売&lt;/a&gt;していて、写真データをサーバーに公開するときの一連作業を自動化するべく Python スクリプトを書きました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/nnamm/pyPhotoMaterials" target="_blank"&gt;https://github.com/nnamm/pyPhotoMaterials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;長いこと使ってきて機能としては満足していますが、新しい風を起こしたいな〜ということで、学習も兼ねて Golang （ Go 言語）で書きなおすことにしました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/nnamm/go-photo-materials" target="_blank"&gt;https://github.com/nnamm/go-photo-materials&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;機能的には満たせているものの、Testing package によるテストの練習や CLI としてビルドするのはこれからです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;いったん作りきれましたので、開発を通して Golang に感じたことをお伝えします。&lt;/p&gt;
&lt;h2 id="golang"&gt;Golang は懐かしくて馴染む&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「非常に懐かしい感じがあり、非常に馴染める言語」&lt;/strong&gt;ってことです。僕、かなり好きかもしれません。 作り方や考え方が懐かしいんですよ。&lt;/p&gt;
&lt;p&gt;・・・のお話をするために過去を振り返ります。&lt;/p&gt;
&lt;h2 id="8"&gt;8 年間のアセンブラ経験&lt;/h2&gt;
&lt;p&gt;僕は 2000 年から 8 年間、JAL 国際線のシステム開発をしていました。&lt;/p&gt;
&lt;p&gt;開発環境は TPF という IBM のメインフレーム用の OS で、OS 上の z/TPF だったか z/VM だったかの中でアセンブラを使っていました。デバッグするときはもちろん 16 進数の世界です。&lt;/p&gt;
&lt;p&gt;アセンブラは人にはやさしくない言語ですが、IF 文や WHILE 文なんかも書けたので、ちょっとは人にやさしいものでした（笑）覚える命令は 30 個くらいしかなく（ Golang も同じですよね）シンプルではあります。扱いは難しかったですが。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数年後、C 言語による開発環境も整備されて試験的に使ったこともあります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;その甲斐あって、レジスタ、メモリとその管理、ポインタという概念なんかが自然と身につきましたね。（ポインタ、難しくないですよ）&lt;/p&gt;
&lt;p&gt;反面、オブジェクト指向な高級言語に最初は馴染めませんでした。お作法を知らなかったこともありますが、中でどんな処理が行われているか分からず、イメージができなかったからです。&lt;/p&gt;
&lt;p&gt;というバックボーンが僕にはあります。&lt;/p&gt;
&lt;p&gt;すると、&lt;strong&gt;Golang で書いているとなんだか懐かしい感覚になるんです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="golang3"&gt;Golang の 3 つの懐かしいところ&lt;/h2&gt;
&lt;h3 id="1"&gt;1. ありそうなことでも実現するには組みあげる&lt;/h3&gt;
&lt;p&gt;現代の言語なら「〜〜な処理がしたい」と考えたとき、大抵はライブラリが整っていたりすることが多いでしょう。また、&lt;code&gt;print（"hogehoge"）&lt;/code&gt;とすれば標準出力に&lt;code&gt;hogehoge&lt;/code&gt;と表示されますよね。&lt;/p&gt;
&lt;p&gt;でも、TPF では表示するだけでひと手間かかりました。旅客データを取得するにも手続きが多く、めんどくさかったです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;のちに TPFDF という CRUD の操作が楽にできるものを使いまくってました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こういう点が Golang と似ているなと感じます。&lt;/p&gt;
&lt;p&gt;Golang は&lt;strong&gt;「言語のコアをシンプルに、何かを実現するときはそのシンプルな機能を組み合わせて実現しよう」&lt;/strong&gt;というのがコンセプトです。&lt;/p&gt;
&lt;p&gt;たとえば FTP。&lt;/p&gt;
&lt;p&gt;Python なら標準の ftplib がありますが Golang にはありません。&lt;strong&gt;「FTP したけりゃ、RFC を読んで自ら仕組みを構築するよろし」&lt;/strong&gt;の世界です（笑）&lt;/p&gt;
&lt;p&gt;「マジか」とびっくりしたものの、おかげで RFC というもので規定されていることや、接続を確立するまでに色々やっていること（ handshake がどーたらこーたら）なんかを知るきっかけになりましたね。&lt;/p&gt;
&lt;p&gt;世の FTP アプリのありがさが身に沁みます。&lt;/p&gt;
&lt;p&gt;とはいえ、FTP を自作していたらいつまでもゴールには到達できないので、今回は jlaffaye/ftp を使わせていただきました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/jlaffaye/ftp" target="_blank"&gt;https://github.com/jlaffaye/ftp&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2022 年 6 月現在、FTPS を実現しようとするとエラーとなるため、FTP 接続しています&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="2"&gt;2. エラーハンドリング&lt;/h3&gt;
&lt;p&gt;Golang はあらゆるところで&lt;code&gt;err != nil&lt;/code&gt;を書きます。めっちゃ書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// os.Crateのエラーハンドリング&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 遅延実行によるClose()のエラーハンドリング&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現代の言語では&lt;code&gt;try〜catch&lt;/code&gt;なんかで書くものでしょう。人によっては「めんどくさっ」と感じる方もいらっしゃるかもしれませんね。&lt;/p&gt;
&lt;p&gt;ところが、これまた懐かしいんですよ（笑）&lt;/p&gt;
&lt;p&gt;前述の TPFDF を使っていたときなんかまさに ↑ こんなふうでしたもの。データ的・システム的なエラーが発生することを考慮し、エラーハンドリングしていました。単体テストめんどくさかったです。&lt;/p&gt;
&lt;p&gt;Golang も同様にしつこいくらいやる文化ですね。&lt;/p&gt;
&lt;p&gt;いや〜懐かしい！&lt;/p&gt;
&lt;h3 id="3"&gt;3. オブジェクト指向ではないけど「風」に書ける&lt;/h3&gt;
&lt;p&gt;Golang はオブジェクト指向プログラミング（ OOP ）ではありません。構造体やインターフェースを使えばそれっぽく書けますので、データとメソッドの結びつきがわかるっちゃわかります。&lt;/p&gt;
&lt;p&gt;Python を使ってきましたが、僕が OOP 的に組めているかというとまだ練習は必要でしょう（そこまで意識することはないでょうけどね）。&lt;/p&gt;
&lt;p&gt;そんな自己評価のところ、Golang で書くと&lt;strong&gt;思考が楽だなぁ&lt;/strong&gt;と感じてしまうあたり、8 年間で培ったアセンブラ＝手続き型は、良くも悪くも僕の基礎を形作っていると感じますね。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="golang_1"&gt;Golang を使いこなすのはこれから&lt;/h2&gt;
&lt;p&gt;懐かしいけれど使いこなせるようになるにはまだまだこれからです。&lt;/p&gt;
&lt;p&gt;でも何だか楽しいです。&lt;/p&gt;
&lt;p&gt;アセンブラ時代にそれとなく入ってきた知識が、現代の CPU や OS、メモリ管理などの仕組みと（厳密には違うかもしれませんが）「同じように考えられるじゃん＝イメージできるなら作れるじゃん」と腑に落ちましたし、そういう細かい内部的なことへの知識欲が膨れ上がりましたね。&lt;/p&gt;
&lt;h2 id="_1"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;Golang は「構造体やインターフェースを使いこなしてなんぼ」という印象です。正直、2 週間程度ではここらへんの理解は浅いですね。Golang らしい書き方も知らないことが多いです。とても重要そうな io.Reader/io.Writer の仕組みも知っておきたい。&lt;/p&gt;
&lt;p&gt;それらは Web や書籍などから他者のコードを読んで慣らしていければいいでしょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一気にすべてを知ることはできません。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;ひとつひとつ知りながら経験していけばいいのです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そのためにはまず何でもいいから作りきることが大切ですね。続けた結果、積み上がったものが経験になりますから。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※掲載した写真は東福寺周辺を SIGMA fp + NOKTON 40mm F1.2 Aspherical にて撮影&lt;/p&gt;
&lt;h2 id="cli"&gt;CLI 開発中に参考にしたものリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/std" target="_blank"&gt;Standard library - Go Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/go-fintech/"&gt;現役シリコンバレーエンジニアが教える Go 入門 + 応用でビットコインのシストレ Fintech アプリの開発 | Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/39ryOYH" target="_blank"&gt;エキスパートたちの Go 言語 一流のコードから応用力を学ぶ (Software Design plus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nobonobo/articles/4fb018a24f9ee9" target="_blank"&gt;Go のプロジェクト構成の基本 | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/hsaki/books/golang-io-package" target="_blank"&gt;Go から学ぶ I/O | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ascii.jp/serialarticles/1235262/" target="_blank"&gt;ASCII.jp ： Go ならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Golang"/><category term="Golang"/></entry></feed>