<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nnamm.work</title><link href="/" rel="alternate"/><link href="/feeds/all.rss.xml" rel="self"/><id>/</id><updated>2022-06-17T12:00:00+09:00</updated><subtitle>portfolio note</subtitle><entry><title>JetBrains製IDEをコマンドラインから起動する方法</title><link href="/posts/012-how-to-start-ide-with-command" rel="alternate"/><published>2022-06-17T12:00:00+09:00</published><updated>2022-06-17T12:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2022-06-17:/posts/012-how-to-start-ide-with-command</id><summary type="html">&lt;h2 id="goland"&gt;"Goland ."と打って起動してはる？&lt;/h2&gt;
&lt;p&gt;（なぜか関西弁）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://neovim.io/" target="_blank"&gt;Neovim&lt;/a&gt; に &lt;a href="https://github.com/neoclide/coc.nvim" target="_blank"&gt;coc.nvim&lt;/a&gt; をインストールして、プレーンな Python や Golang の開発環境を構築していた …&lt;/p&gt;</summary><content type="html">&lt;h2 id="goland"&gt;"Goland ."と打って起動してはる？&lt;/h2&gt;
&lt;p&gt;（なぜか関西弁）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://neovim.io/" target="_blank"&gt;Neovim&lt;/a&gt; に &lt;a href="https://github.com/neoclide/coc.nvim" target="_blank"&gt;coc.nvim&lt;/a&gt; をインストールして、プレーンな Python や Golang の開発環境を構築していたとき、&lt;a href="https://engineering.mercari.com" target="_blank"&gt;mercari engineering&lt;/a&gt; の記事と動画に辿り着きました。&lt;/p&gt;
&lt;div class="youtube"&gt;&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="" frameborder="0" height="auto" src="https://www.youtube.com/embed/8MdxqDb07eQ" title="YouTube video player" width="100%"&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;3:03 あたりのこと。&lt;code&gt;gland .&lt;/code&gt;と入力したらカレントディレクトリで Goland が立ち上がっていました。&lt;/p&gt;
&lt;p&gt;あら〜こんなことできるの？と調べてみたら、ちょっと手を加えればできることがわかりましたので早速設定。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OS/Software&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;11.6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JetBrains Toolbox App&lt;/td&gt;
&lt;td&gt;1.24.1280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Goland&lt;/td&gt;
&lt;td&gt;22.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PyCharm&lt;/td&gt;
&lt;td&gt;22.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iTerm&lt;/td&gt;
&lt;td&gt;3.4.15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_2"&gt;設定方法&lt;/h2&gt;
&lt;h3 id="1-generate-shell-scriptson"&gt;1. Generate shell scripts を ON&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;右上の六角形マークをクリック&lt;/li&gt;
&lt;li&gt;Settings をクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/012/derivatives/crisp/1x/1.jpg" srcset="../../images/posts/012/derivatives/crisp/1x/1.jpg 1x, ../../images/posts/012/derivatives/crisp/2x/1.jpg 2x, ../../images/posts/012/derivatives/crisp/3x/1.jpg 3x"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tools をクリック&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/012/derivatives/crisp/1x/2.jpg" srcset="../../images/posts/012/derivatives/crisp/1x/2.jpg 1x, ../../images/posts/012/derivatives/crisp/2x/2.jpg 2x, ../../images/posts/012/derivatives/crisp/3x/2.jpg 3x"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate shell scripts を ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/012/derivatives/crisp/1x/3.jpg" srcset="../../images/posts/012/derivatives/crisp/1x/3.jpg 1x, ../../images/posts/012/derivatives/crisp/2x/3.jpg 2x, ../../images/posts/012/derivatives/crisp/3x/3.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="2"&gt;2. 所定のディレクトリに起動用のシェルを格納&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;環境変数（ echo $PATH ）に登録されいてるパスに「goland」コマンドを作成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /usr/loca/bin
$ vim goland
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;/usr/bin/local/goland&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#! /bin/sh&lt;/span&gt;
open -na &lt;span class="s2"&gt;"GoLand"&lt;/span&gt; --args &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;▶︎ 詳細は &lt;a href="https://www.jetbrains.com/help/go/working-with-the-ide-features-from-command-line.html" target="_blank"&gt;Command-line interface | GoLand&lt;/a&gt; を参照ください&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実行権限を付与&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ chmod +x goland

&lt;span class="c1"&gt;# 確認&lt;/span&gt;
$ which goland
/usr/local/bin/goland
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="pycharm"&gt;※PyCharm も同様に起動できるようにします&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ cp -p goland pycharm
$ vim pycharm

---
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;
open -na &lt;span class="s2"&gt;"PyCharm"&lt;/span&gt; --args &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
---

$ which pycharm
/usr/local/bin/pycharm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでコマンドから IDE が起動するようになります。作業ディレクトリ上で&lt;code&gt;goland .&lt;/code&gt;や&lt;code&gt;pycharm .&lt;/code&gt;と入力してみてください。&lt;/p&gt;
&lt;h2 id="_3"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;コードを書いていると、できるだけキーボードだけで済ませたくなります。上記のように設定すれば、IDE がサクッと起動できるのでグッと楽になります。&lt;/p&gt;
&lt;p&gt;もちろん、Terminal で&lt;code&gt;open -na PyCharm .&lt;/code&gt;と入力することで同じことはできます。でも、そこはほら、&lt;strong&gt;もうちょっと Cool にやりたいじゃないですか（笑）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;だからこれでいいのです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/012/derivatives/crisp/1x/4.jpg" srcset="../../images/posts/012/derivatives/crisp/1x/4.jpg 1x, ../../images/posts/012/derivatives/crisp/2x/4.jpg 2x, ../../images/posts/012/derivatives/crisp/3x/4.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※掲載した写真は、とある 12 月の京都。伏見稲荷大社の裏山を散策したヨウスを RICOH GR で&lt;/p&gt;
&lt;h3 id="_4"&gt;お知らせ&lt;/h3&gt;
&lt;p&gt;JetBrains 製の IDE にご興味がありましたら、&lt;a href="https://samuraism.com/referral-program" target="_blank"&gt;サムライズムさんの紹介プログラム&lt;/a&gt;から購入するとちょっとお得になりますのでリンクを貼っておきます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://secure.samuraism.com/referral/33D464315EB3916505CA8B3DF9748418"&gt;https://secure.samuraism.com/referral/33D464315EB3916505CA8B3DF9748418&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こちらから新規購入すると最大 1000 円引きされます。すると、僕の場合は次回更新時に 200 円引きされるというプログラムです。よかったらご利用ください。&lt;/p&gt;</content><category term="Creative"/><category term="PyCharm"/><category term="Goland"/></entry><entry><title>Golang（Go言語）は懐かしくて馴染むプログラミング言語</title><link href="/posts/011-i-might-like-golang" rel="alternate"/><published>2022-06-16T23:00:00+09:00</published><updated>2022-06-16T23:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2022-06-16:/posts/011-i-might-like-golang</id><summary type="html">&lt;p&gt;僕は &lt;a href="https://note.com/tnnamm/m/m2aa9550047ed" target="_blank"&gt;note で写真素材を販売&lt;/a&gt;していて、写真データをサーバーに公開するときの一連作業を自動化するべく Python スクリプ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;僕は &lt;a href="https://note.com/tnnamm/m/m2aa9550047ed" target="_blank"&gt;note で写真素材を販売&lt;/a&gt;していて、写真データをサーバーに公開するときの一連作業を自動化するべく Python スクリプトを書きました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/nnamm/pyPhotoMaterials" target="_blank"&gt;https://github.com/nnamm/pyPhotoMaterials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;長いこと使ってきて機能としては満足していますが、新しい風を起こしたいな〜ということで、学習も兼ねて Golang （ Go 言語）で書きなおすことにしました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/nnamm/go-photo-materials" target="_blank"&gt;https://github.com/nnamm/go-photo-materials&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;機能的には満たせているものの、Testing package によるテストの練習や CLI としてビルドするのはこれからです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;いったん作りきれましたので、開発を通して Golang に感じたことをお伝えします。&lt;/p&gt;
&lt;h2 id="golang"&gt;Golang は懐かしくて馴染む&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「非常に懐かしい感じがあり、非常に馴染める言語」&lt;/strong&gt;ってことです。僕、かなり好きかもしれません。 作り方や考え方が懐かしいんですよ。&lt;/p&gt;
&lt;p&gt;・・・のお話をするために過去を振り返ります。&lt;/p&gt;
&lt;h2 id="8"&gt;8 年間のアセンブラ経験&lt;/h2&gt;
&lt;p&gt;僕は 2000 年から 8 年間、JAL 国際線のシステム開発をしていました。&lt;/p&gt;
&lt;p&gt;開発環境は TPF という IBM のメインフレーム用の OS で、OS 上の z/TPF だったか z/VM だったかの中でアセンブラを使っていました。デバッグするときはもちろん 16 進数の世界です。&lt;/p&gt;
&lt;p&gt;アセンブラは人にはやさしくない言語ですが、IF 文や WHILE 文なんかも書けたので、ちょっとは人にやさしいものでした（笑）覚える命令は 30 個くらいしかなく（ Golang も同じですよね）シンプルではあります。扱いは難しかったですが。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数年後、C 言語による開発環境も整備されて試験的に使ったこともあります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;その甲斐あって、レジスタ、メモリとその管理、ポインタという概念なんかが自然と身につきましたね。（ポインタ、難しくないですよ）&lt;/p&gt;
&lt;p&gt;反面、オブジェクト指向な高級言語に最初は馴染めませんでした。お作法を知らなかったこともありますが、中でどんな処理が行われているか分からず、イメージができなかったからです。&lt;/p&gt;
&lt;p&gt;というバックボーンが僕にはあります。&lt;/p&gt;
&lt;p&gt;すると、&lt;strong&gt;Golang で書いているとなんだか懐かしい感覚になるんです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="golang3"&gt;Golang の 3 つの懐かしいところ&lt;/h2&gt;
&lt;h3 id="1"&gt;1. ありそうなことでも実現するには組みあげる&lt;/h3&gt;
&lt;p&gt;現代の言語なら「〜〜な処理がしたい」と考えたとき、大抵はライブラリが整っていたりすることが多いでしょう。また、&lt;code&gt;print（"hogehoge"）&lt;/code&gt;とすれば標準出力に&lt;code&gt;hogehoge&lt;/code&gt;と表示されますよね。&lt;/p&gt;
&lt;p&gt;でも、TPF では表示するだけでひと手間かかりました。旅客データを取得するにも手続きが多く、めんどくさかったです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;のちに TPFDF という CRUD の操作が楽にできるものを使いまくってました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こういう点が Golang と似ているなと感じます。&lt;/p&gt;
&lt;p&gt;Golang は&lt;strong&gt;「言語のコアをシンプルに、何かを実現するときはそのシンプルな機能を組み合わせて実現しよう」&lt;/strong&gt;というのがコンセプトです。&lt;/p&gt;
&lt;p&gt;たとえば FTP。&lt;/p&gt;
&lt;p&gt;Python なら標準の ftplib がありますが Golang にはありません。&lt;strong&gt;「FTP したけりゃ、RFC を読んで自ら仕組みを構築するよろし」&lt;/strong&gt;の世界です（笑）&lt;/p&gt;
&lt;p&gt;「マジか」とびっくりしたものの、おかげで RFC というもので規定されていることや、接続を確立するまでに色々やっていること（ handshake がどーたらこーたら）なんかを知るきっかけになりましたね。&lt;/p&gt;
&lt;p&gt;世の FTP アプリのありがさが身に沁みます。&lt;/p&gt;
&lt;p&gt;とはいえ、FTP を自作していたらいつまでもゴールには到達できないので、今回は jlaffaye/ftp を使わせていただきました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/jlaffaye/ftp" target="_blank"&gt;https://github.com/jlaffaye/ftp&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2022 年 6 月現在、FTPS を実現しようとするとエラーとなるため、FTP 接続しています&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="2"&gt;2. エラーハンドリング&lt;/h3&gt;
&lt;p&gt;Golang はあらゆるところで&lt;code&gt;err != nil&lt;/code&gt;を書きます。めっちゃ書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// os.Crateのエラーハンドリング&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 遅延実行によるClose()のエラーハンドリング&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;defer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;現代の言語では&lt;code&gt;try〜catch&lt;/code&gt;なんかで書くものでしょう。人によっては「めんどくさっ」と感じる方もいらっしゃるかもしれませんね。&lt;/p&gt;
&lt;p&gt;ところが、これまた懐かしいんですよ（笑）&lt;/p&gt;
&lt;p&gt;前述の TPFDF を使っていたときなんかまさに ↑ こんなふうでしたもの。データ的・システム的なエラーが発生することを考慮し、エラーハンドリングしていました。単体テストめんどくさかったです。&lt;/p&gt;
&lt;p&gt;Golang も同様にしつこいくらいやる文化ですね。&lt;/p&gt;
&lt;p&gt;いや〜懐かしい！&lt;/p&gt;
&lt;h3 id="3"&gt;3. オブジェクト指向ではないけど「風」に書ける&lt;/h3&gt;
&lt;p&gt;Golang はオブジェクト指向プログラミング（ OOP ）ではありません。構造体やインターフェースを使えばそれっぽく書けますので、データとメソッドの結びつきがわかるっちゃわかります。&lt;/p&gt;
&lt;p&gt;Python を使ってきましたが、僕が OOP 的に組めているかというとまだ練習は必要でしょう（そこまで意識することはないでょうけどね）。&lt;/p&gt;
&lt;p&gt;そんな自己評価のところ、Golang で書くと&lt;strong&gt;思考が楽だなぁ&lt;/strong&gt;と感じてしまうあたり、8 年間で培ったアセンブラ＝手続き型は、良くも悪くも僕の基礎を形作っていると感じますね。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="golang_1"&gt;Golang を使いこなすのはこれから&lt;/h2&gt;
&lt;p&gt;懐かしいけれど使いこなせるようになるにはまだまだこれからです。&lt;/p&gt;
&lt;p&gt;でも何だか楽しいです。&lt;/p&gt;
&lt;p&gt;アセンブラ時代にそれとなく入ってきた知識が、現代の CPU や OS、メモリ管理などの仕組みと（厳密には違うかもしれませんが）「同じように考えられるじゃん＝イメージできるなら作れるじゃん」と腑に落ちましたし、そういう細かい内部的なことへの知識欲が膨れ上がりましたね。&lt;/p&gt;
&lt;h2 id="_1"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;Golang は「構造体やインターフェースを使いこなしてなんぼ」という印象です。正直、2 週間程度ではここらへんの理解は浅いですね。Golang らしい書き方も知らないことが多いです。とても重要そうな io.Reader/io.Writer の仕組みも知っておきたい。&lt;/p&gt;
&lt;p&gt;それらは Web や書籍などから他者のコードを読んで慣らしていければいいでしょう。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一気にすべてを知ることはできません。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;ひとつひとつ知りながら経験していけばいいのです。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そのためにはまず何でもいいから作りきることが大切ですね。続けた結果、積み上がったものが経験になりますから。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/011_220616-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/011_220616-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/011_220616-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/011_220616-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※掲載した写真は東福寺周辺を SIGMA fp + NOKTON 40mm F1.2 Aspherical にて撮影&lt;/p&gt;
&lt;h2 id="cli"&gt;CLI 開発中に参考にしたものリスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pkg.go.dev/std" target="_blank"&gt;Standard library - Go Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/go-fintech/"&gt;現役シリコンバレーエンジニアが教える Go 入門 + 応用でビットコインのシストレ Fintech アプリの開発 | Udemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/39ryOYH" target="_blank"&gt;エキスパートたちの Go 言語 一流のコードから応用力を学ぶ (Software Design plus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/nobonobo/articles/4fb018a24f9ee9" target="_blank"&gt;Go のプロジェクト構成の基本 | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/hsaki/books/golang-io-package" target="_blank"&gt;Go から学ぶ I/O | Zenn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ascii.jp/serialarticles/1235262/" target="_blank"&gt;ASCII.jp ： Go ならわかるシステムプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Golang"/><category term="Golang"/></entry><entry><title>コードが動かない！むきー！な気持ちの解消法</title><link href="/posts/010-how-to-refresh-dealing-bugs" rel="alternate"/><published>2021-05-30T01:00:00+09:00</published><updated>2021-05-30T01:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2021-05-30:/posts/010-how-to-refresh-dealing-bugs</id><summary type="html">&lt;p&gt;&lt;strong&gt;コードを書いて 1 発で動くことは稀です。少なくとも僕は。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コードを組むのは人間ですからケアレスミスはあるもの …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;コードを書いて 1 発で動くことは稀です。少なくとも僕は。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コードを組むのは人間ですからケアレスミスはあるもの。それでも動かす・作りきることを楽しめるのが、ソフトウェアエンジニアかと思います。動いたときは嬉しいし、知見が深まるので僕は楽しいですね。&lt;/p&gt;
&lt;p&gt;でも、手詰まって！どーしようもなくて！動かない！むきー！となることはふつうにあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;そんなときの僕の心の解消法、つまり気分転換法をまとめます。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;身体を動かす&lt;/h2&gt;
&lt;p&gt;その場から離れて、歩いたり身体を動かします。&lt;/p&gt;
&lt;p&gt;ボディメンテでお世話になっていた整骨院の先生が、よく「筋肉の酸欠」の話を聞かせてくれました。ずっと同じ姿勢でいると、血の巡りが滞るため身体にはよくないと。&lt;/p&gt;
&lt;p&gt;それを「酸欠」と呼んでいました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;酸欠を解消するために、ストレッチをして筋肉に酸素を送りこみます。&lt;/strong&gt;僕がよくやっていることは&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;・肩を回す&lt;br/&gt;
・首を前後に曲げる&lt;br/&gt;
・背中をひねる&lt;br/&gt;
・屈伸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;くらいで、1 時間に 1 回やるのが理想です。&lt;/p&gt;
&lt;h2 id="_2"&gt;違うことをする&lt;/h2&gt;
&lt;p&gt;違う作業をするのでもよいのですが、僕は隙間時間にあれもこれもちょっとずつ進めることが苦手なタイプなので、違う作業はしません。&lt;/p&gt;
&lt;p&gt;前述の「身体を動かす」と連動します。たとえはこんなこと。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;・窓の大きい部屋で空をボォっと眺める&lt;br/&gt;
・広い場所に出てなんとなくボォっと眺める&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;僕の場合、結局はコードのことを考えちゃうのですが（笑）、おかげでひらめくことも多いです。&lt;/p&gt;
&lt;h2 id="_3"&gt;気持ちを感じきる&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;個人的にはこの「感じきる」ことはとても大切だと思ってます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;どういうことかというと、僕の場合、「動かない → できない → くやしい（怒）」となることが多い。「なんでできないんだ！俺はまだまだだ！」というように、くやしい気持ちに包まれてしまう。&lt;/p&gt;
&lt;p&gt;でも、このときむりやり頭で理解して鎮めようとするのは心の面からいうと不十分です。くやしいなら&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;・くそー、動かないのムカツクー！&lt;br/&gt;
・くやしいなぁ、くやしいなぁ、ちっきしょー&lt;br/&gt;
・ぜってーやってやる！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;といった&lt;strong&gt;「感情的なことば」「感情的ななにか」を脳内でもいいし、だれもいないところで声に出してもいいから発散しちゃう方が断然いい。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;発散したあとに「まぁ、しかたないか（笑）」と笑い飛ばせたらいいですね。&lt;/p&gt;
&lt;p&gt;要は（いま抱えている感情に）降参して諦めるってことです。  でも、これは現状を肯定することになります。&lt;/p&gt;
&lt;p&gt;「諦める」は「明らかに見る」が語源のなので、むしろ今をしっかりと把握することだし、「それでも OK」と肯定していることなのでネガティブはなくポジティブなんですね。&lt;/p&gt;
&lt;h2 id="_4"&gt;しっかり寝る&lt;/h2&gt;
&lt;p&gt;エンジニアは日々脳みそフル回転してます。しっかり休ませてあげることはむしろエンジニアの義務。&lt;/p&gt;
&lt;p&gt;そもそも人生を存分に楽しむためには「自分メンテ」が大切です。身体と心を適度に休ませて、使ってあげるのがベスト。&lt;/p&gt;
&lt;h2 id="_5"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;個人的に気分転換する方法でした。セルフケアですね。&lt;/p&gt;
&lt;p&gt;もちろん、現場の仲間とふつう話したり、話を聴いてもらったり、そういうことから気分転換するのも良いですよ。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/010_210530-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/010_210530-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/010_210530-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/010_210530-1.jpg 3x"/&gt;&lt;/p&gt;</content><category term="Creative"/><category term="Coding"/><category term="Mind"/></entry><entry><title>iCloud Driveは何でもかんでも同期されるわけじゃないのね</title><link href="/posts/009-be-careful-files-sync-by-icloud" rel="alternate"/><published>2021-05-30T00:00:00+09:00</published><updated>2021-05-30T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2021-05-30:/posts/009-be-careful-files-sync-by-icloud</id><summary type="html">&lt;p&gt;今回はデータ管理についての備忘録です。最終的に記事タイトルのことに行き着いた、失敗から得た学びです。&lt;/p&gt;
&lt;p&gt;僕は開 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今回はデータ管理についての備忘録です。最終的に記事タイトルのことに行き着いた、失敗から得た学びです。&lt;/p&gt;
&lt;p&gt;僕は開発系のデータを含めて、ざっくりした作業ディレクトリを作っています。Coding とか Photo とか。それらを定期的に外部ストレージにバックアップ。プロジェクトによっては GitHub でも管理します。&lt;/p&gt;
&lt;p&gt;ある日、データ管理について考えることがありました。&lt;/p&gt;
&lt;h2 id="_1"&gt;我、名案、閃キ&lt;/h2&gt;
&lt;p&gt;ふと思ったのです。&lt;/p&gt;
&lt;p&gt;開発系データを iCloud Drive （正確には macOS の Documents ディレクトリ）に移動したら 2 重で保存されていいじゃーん！&lt;/p&gt;
&lt;p&gt;そんなわけで嬉々としてフォルダを移動しました。ただ、完全同期されるまで 1 日じゃ終わりませんでした。&lt;/p&gt;
&lt;p&gt;どうやら 1 万や 10 万といった大量ファイルの同期リクエストがなされると、ファイルサイズに関わらず、とてつもなく時間がかかるようです。調べてみると、これは Dropbox でも同様でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;venv 環境や node_modules 群といったものまであったので、そりゃもう大量のファイルがありました・・・&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;「.」で始まるファイルがなくなってる&lt;/h2&gt;
&lt;p&gt;さて、同期もおわり Terminal でのぞいてみると「.git」や「.gitignore」、「.eslintrc.js」などがことごとくない！！&lt;/p&gt;
&lt;p&gt;どうも iCloud Drive の仕様で、何でもかんでも同期されるわけじゃないようですね。Stack Overflow や Apple のサイトをみるに、そのことが書かれていました。&lt;/p&gt;
&lt;h2 id="_3"&gt;情報源&lt;/h2&gt;
&lt;h3 id="icloud-drive-faq-apple-support"&gt;&lt;a href="https://support.apple.com/en-us/HT201104" target="_blank"&gt;iCloud Drive FAQ - Apple Support&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;「What types of files can I store in iCloud Drive?」の項には、こう書かれしいます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You shouldn't store app folders, libraries, or .tmp files in iCloud Drive.&lt;br/&gt;&lt;br/&gt;
アプリフォルダー、ライブラリ、または.tmp ファイルを iCloud ドライブに保存しないでください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="github-can-git-and-icloud-drive-be-effectively-used-together-stack-overflow"&gt;&lt;a href="https://stackoverflow.com/questions/35853139/can-git-and-icloud-drive-be-effectively-used-together/51253959#51253959" target="_blank"&gt;github - Can Git and iCloud Drive be effectively used together? - Stack Overflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;「.git」はアプリフォルダー扱いとのこと。&lt;/p&gt;
&lt;h3 id="how-to-exclude-a-sub-folder-from-icloud-drive-in-macos-sierra-ask-different"&gt;&lt;a href="https://apple.stackexchange.com/questions/254313/how-to-exclude-a-sub-folder-from-icloud-drive-in-macos-sierra/295929#295929" target="_blank"&gt;How to exclude a sub folder from iCloud drive in macOS Sierra? - Ask Different&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;こちらには具体的にどんなファイルが同期されないかがリストアップされてました。以下、Stack Overflow から拝借。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Filename:&lt;/strong&gt;&lt;br/&gt;
    is .DS_Store&lt;br/&gt;
    begins with (A Document Being Saved&lt;br/&gt;
    contains .nosync (in any case)&lt;br/&gt;
    is .ubd&lt;br/&gt;
    contains .weakpkg&lt;br/&gt;
    is tmp (in any case)&lt;br/&gt;
    is .tmp (in any case)&lt;br/&gt;
    is desktop.ini (in any case)&lt;br/&gt;
    begins with ~$&lt;br/&gt;
    is Microsoft User Data (in any case)&lt;br/&gt;
    is $RECYCLE.BIN (in any case)&lt;br/&gt;
    is iPhoto Library (in any case)&lt;br/&gt;
    is Dropbox (in any case)&lt;br/&gt;
    is OneDrive (in any case)&lt;br/&gt;
    is IDrive-Sync (in any case)&lt;br/&gt;
    is .dropbox (in any case)&lt;br/&gt;
    is .dropbox.attr (in any case)&lt;br/&gt;
    is icon\r (in any case)&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;Extension is (in any case):&lt;/strong&gt;&lt;br/&gt;
    tmp&lt;br/&gt;
    photoslibrary&lt;br/&gt;
    photolibrary&lt;br/&gt;
    aplibrary&lt;br/&gt;
    migratedaplibrary&lt;br/&gt;
    migratedphotolibrary&lt;br/&gt;
    migratedaperturelibrary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;iCloud Drive はたいていの場合は普通のストレージとして使えますが、物理ストレージと同じではないってことですね。認識を新たにしないと。&lt;/p&gt;
&lt;p&gt;現在、クラウドが広がり、あたりまえになっています。使いようによっては手間のかからないバックアップ手段ともなりますが、物理ストレージではありません。&lt;/p&gt;
&lt;p&gt;僕の用途としては写真ファイルもありますから、物理的なバックアップはまだまだ必要だと思うのでした。&lt;/p&gt;</content><category term="macOS"/><category term="macOS"/><category term="iCloud"/><category term="Apple"/></entry><entry><title>SIGMA sd Quattro Hと28mm F1.4 DG HSMを買いました</title><link href="/posts/008-buy-sdquattroh-art28mm" rel="alternate"/><published>2020-10-30T13:28:38+09:00</published><updated>2020-10-30T13:28:38+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-10-30:/posts/008-buy-sdquattroh-art28mm</id><summary type="html">&lt;p&gt;新しいカメラを買いました。&lt;a href="https://www.sigma-global.com/jp/cameras/sd-series/" target="_blank"&gt;SIGMA sd Quattro H&lt;/a&gt; + &lt;a href="https://www.sigma-global.com/jp/lenses/cas/product/art/a_28_14/" target="_blank"&gt;28mm F1.4&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;ある日、DP1 Merrill で撮った写真を見返したときに「うっわ、めっちゃ精細に …&lt;/p&gt;</summary><content type="html">&lt;p&gt;新しいカメラを買いました。&lt;a href="https://www.sigma-global.com/jp/cameras/sd-series/" target="_blank"&gt;SIGMA sd Quattro H&lt;/a&gt; + &lt;a href="https://www.sigma-global.com/jp/lenses/cas/product/art/a_28_14/" target="_blank"&gt;28mm F1.4&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;ある日、DP1 Merrill で撮った写真を見返したときに「うっわ、めっちゃ精細に写っとる！」と感動。&lt;/p&gt;
&lt;p&gt;そこで「2020 年の今、Foveon を使うならどのカメラがいいかな？」とチャンプカメラ港北ニュータウン店の店長に相談した結果、sd Quattro H と 28mmF1.4 となりました。初めての Art レンズです。&lt;/p&gt;
&lt;p&gt;sd Quattro H にした理由は 1 つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;APS-C までのセンサーしか使ったことがないので、その上のセンサーを体験したい&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;28mm にした理由は 2 つ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;換算 36mm という Leica ではお馴染みの 35mm 画角近辺を使いたい&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SA マウントのレンズの中では最新（当時）だから&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注文して僕の手元に届いたのは 2020 年 7 月半ばのこと。3 ヶ月使ってみたので、sd Quattro H の「良いところ」と「悪いところ」を書きます。&lt;/p&gt;
&lt;p&gt;まずは良いところから。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/008_201030-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;ゆっくりじっくり撮るカメラ&lt;/h2&gt;
&lt;h3 id="_2"&gt;ゆっくりじっくり”だから”いい&lt;/h3&gt;
&lt;p&gt;sd Quattro H と Art28mm を組み合わせると大きいし重いです。AF も FUJIFILM X-H1 と比べると遅いし、SD カードへの書き込みも遅いです。&lt;/p&gt;
&lt;p&gt;だからこそ、&lt;strong&gt;被写体にじっくり寄り添えるし、フレーミングやピント合わせも丁寧に行うことができます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;バババっと素早く撮りたい人には不向きなカメラといえるでしょう。&lt;/p&gt;
&lt;p&gt;でもね、この「ゆっくりじっくり」が僕には良かった。写真を撮る基礎訓練になるからです。&lt;/p&gt;
&lt;h3 id="_3"&gt;写真を撮る基礎訓練&lt;/h3&gt;
&lt;p&gt;一連の動作をゆっくりじっくりと繰り返すことが良い訓練になると僕は思います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被写体に向き合う&lt;/li&gt;
&lt;li&gt;ファインダーをのぞく／ EVF を見る&lt;/li&gt;
&lt;li&gt;露出を決める&lt;/li&gt;
&lt;li&gt;AF/MF でピントを合わせる&lt;/li&gt;
&lt;li&gt;シャッターを切る（体幹重要）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「AF/MF でピントを合わせる」を補足すると、sd Quattro H の AF は、わりと正確ですが甘いこともしばしば。拡大表示してピント調整することが増えます。&lt;/p&gt;
&lt;p&gt;すると、必然的に被写体を観察することになりますし、ピント調整に集中します。これがいい訓練になるのです。&lt;/p&gt;
&lt;p&gt;また、Art レンズのピントリングには適度な重みがあり、ちょっと回すだけで調整できますから、副次効果として&lt;strong&gt;「カメラを操っている感」が存分に味わえます（笑）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AF 技術は日々進化しているとはいえ、&lt;strong&gt;最終的には自分の目でピント面を確認する方が良いということが体験できましたね。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ゆっくりじっくり撮っていたら、MF で撮った方が楽と気づきました。以来、もっぱら MF で撮るようになりました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/008_201030-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_4"&gt;ピントがドンピシャの写真はすごい&lt;/h2&gt;
&lt;p&gt;露出を決めて、ピントを合わせてシャッターを切る。&lt;/p&gt;
&lt;p&gt;これだけの簡単操作なのに、APS-H センサー＆ F1.4 であることからか、ピントを外すことも多いです。くやしい！&lt;/p&gt;
&lt;p&gt;でもね、&lt;strong&gt;バッチリハマったときの絵は素晴らしいものがあります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Foveon が生み出す写真の鮮明さは、ベイヤーセンサー（ X-Trans でさえ）とはまるで違うことが体感できます。色も違いますね。独特です。RGB の独立 3 層構造ゆえに本物の色を写しとれると言われますが、これは好みが分かれるかな。&lt;/p&gt;
&lt;p&gt;さらに特筆すべきは、さすがの Art レンズ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大抵の場合、めっちゃまっすぐに写ります。&lt;/strong&gt;これにはびっくりしました。光学性能だけでまっすぐにするって、そりゃレンズはデカくなるし、重くなりますよ（笑）&lt;/p&gt;
&lt;h2 id="iso400800"&gt;ISO 感度は 400 か 800 まで（笑）&lt;/h2&gt;
&lt;p&gt;これはもう SIMGA fp をのぞく「SIGMA あるある」ですね（笑）&lt;/p&gt;
&lt;p&gt;Quattro 世代とはいえ、カラーで撮る場合は ISO100 か 200、いっても 400 です。モノクロでいい感じの雰囲気を出すために 800 なんて設定することもあります。&lt;/p&gt;
&lt;p&gt;適材適所でカメラを使い分けましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/008_201030-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;次にちょっと悪いと感じるところ。&lt;/p&gt;
&lt;h2 id="evf"&gt;EVF/背面液晶に写る色が撮れる色ではない&lt;/h2&gt;
&lt;p&gt;FUJIFILM X-H1 は露出や WB の設定が EVF/背面液晶に反映されます。わりと正確でイメージどおりに撮ることができます。&lt;/p&gt;
&lt;p&gt;一方、sd Quattro H には「MF 時に露出や WB の設定が反映される」という設定があるのですが、あんまり正確じゃないです。特に露出なんか顕著。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;撮ってから自分好みの絵になったかどうかを確認した方がいいね。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そうして「sd Quattro H が出す色のクセ」を理解していく必要があります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/008_201030-4.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-4.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-4.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-4.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_5"&gt;センサーダストの課題&lt;/h2&gt;
&lt;p&gt;sd Quattro で話題になったというセンサーダストは Quattro H にもあります。もちろん個体差はあるでしょうけど僕のはあります。絞るとびびる。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sigma-photo.co.jp/support/contact/" target="_blank"&gt;SIGMA の本社窓口（川崎市麻生区）&lt;/a&gt;に電話して確認しました。担当してくださった方の回答は以下のとおり。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本件は SIGMA も認知している課題（宿命のようなものだと）&lt;/li&gt;
&lt;li&gt;センサークリーニングは保証期間が過ぎても対応する&lt;/li&gt;
&lt;li&gt;センサークリーニングは 2 週間程度かかる&lt;/li&gt;
&lt;li&gt;発送は着払いで OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今のところ無償で清掃してくれるそうです。めっちゃ助かります。&lt;/p&gt;
&lt;p&gt;発送する際には以下を揃えると Good です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カメラボディ&lt;/li&gt;
&lt;li&gt;カメラの保証書&lt;/li&gt;
&lt;li&gt;修理品納品書（お客様控え）&lt;/li&gt;
&lt;li&gt;「クリーニングよろしくお願いします」みたいな感謝の添え書き&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/008_201030-5.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-5.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-5.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-5.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_6"&gt;おわりに：買って良かったカメラ&lt;/h2&gt;
&lt;p&gt;上達するには練習あるのみですね。カメラの操作はもちろん、sd Quattro H が出す色のクセを理解することを含めて。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;カラーモードはニュートラルを基本にしています。他にスタンダードやフォレストグリーンも使うことが多いです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;すごいカメラを買ったからといって、すぐにすごい写真が撮れるわけではありません。もちろん、高性能化にともない簡単に撮れるようにはなります。iPhone のように誰でも簡単に撮れる時代ですし。&lt;/p&gt;
&lt;p&gt;でも、&lt;strong&gt;道具は使い込み、手に馴染んでいくからこそ、アウトプットの質が高まります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そんな当たり前のことに気づかせてくれたカメラなので買って良かったです。&lt;/p&gt;
&lt;p&gt;ある意味、sd Quattro H は写真力養成ギプスなカメラですよ（笑）しばらく使ってから X-H1 を使ってみたら「うっわー楽すぎる！」って毎回（本当に毎回）思いますもん。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;亀仙人の甲羅を担いで修行していた若かりし頃の悟空とクリリンの気持ち、めっちゃわかる。空高く飛べるよね w&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" src="../../images/posts/derivatives/crisp/1x/008_201030-6.jpg" srcset="../../images/posts/derivatives/crisp/1x/008_201030-6.jpg 1x, ../../images/posts/derivatives/crisp/2x/008_201030-6.jpg 2x, ../../images/posts/derivatives/crisp/3x/008_201030-6.jpg 3x"/&gt;&lt;/p&gt;</content><category term="Photography"/><category term="SIGMA"/><category term="sdQuattroH"/><category term="Art28mm"/></entry><entry><title>Blender｜RPR DenoiserとDenoise Nodeの性能を検証する</title><link href="/posts/007-verify-rpr-denoiser-in-blender" rel="alternate"/><published>2020-06-07T20:23:31+09:00</published><updated>2020-06-13T00:10:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-06-07:/posts/007-verify-rpr-denoiser-in-blender</id><summary type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt;の新バージョン、2.83 LTS がリリースされました。&lt;/p&gt;
&lt;p&gt;多くのユーザーが新機能や改善点を発信されているなか、僕は&lt;a href="https://www.amd.com/ja/technologies/radeon-prorender-blender" target="_blank"&gt;AMD Padeon …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt;の新バージョン、2.83 LTS がリリースされました。&lt;/p&gt;
&lt;p&gt;多くのユーザーが新機能や改善点を発信されているなか、僕は&lt;a href="https://www.amd.com/ja/technologies/radeon-prorender-blender" target="_blank"&gt;AMD Padeon ProRender&lt;/a&gt;の話をします。はい、2.83 とかまったく関係ありません（笑）&lt;/p&gt;
&lt;p&gt;僕は Vega20 を積んだ Macbook Pro を使っているので、ProRender のことを調べることが多いです。&lt;a href="https://nnamm.com" target="_blank"&gt;僕の WordPress サイト&lt;/a&gt;でも ProRender の記事がよく読まれています。&lt;/p&gt;
&lt;p&gt;今回は&lt;strong&gt;「ProRender の RPR Denoiser と Blender の Denoise Node はどちらが綺麗にノイズを除去してくれるのかな？」&lt;/strong&gt;を以下 2 つの観点で検証しました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RPR Denoiser （全フィルタ）と Denoise Node ON/OFF で生成される画像とレンダリング時間の違い&lt;/li&gt;
&lt;li&gt;RPR Denoiser （ Bilateral ） ON/OFF の違い&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;結論をいうと&lt;strong&gt;『Denoise Node のみ使う方がいい感じの絵が得られる』&lt;/strong&gt;でした。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Pro 2018 年モデル（ Vega20 ）&lt;/li&gt;
&lt;li&gt;macOS Catalina&lt;/li&gt;
&lt;li&gt;Blender 2.83 LTS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prorender-rpr-denoiser"&gt;ProRender RPR Denoiser&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_200607-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_200607-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_200607-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_200607-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;2020 年 5 月に ProRender v2.4 系がリリースされました。現段階で 4 種類のデノイズフィルタがあります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bilateral&lt;/li&gt;
&lt;li&gt;Local Weighted Regression&lt;/li&gt;
&lt;li&gt;Edge Avoiding Wavelets&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;v2.4 で macOS の ML Denoising がサポートされたこともあり、いっちょ性能を調べてみようと思ったのです。この記事を書くきっかけですね。&lt;/p&gt;
&lt;h2 id="blender-denoise-node"&gt;Blender Denoise Node&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_200607-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_200607-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_200607-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_200607-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Blender 2.81 のとき Intel Open Image Denoise を搭載した Node が追加されました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://nnamm.com/blog/6564" target="_blank"&gt;Blender｜Intel 製 AI ノイズ除去機能「Intel Open Image Denoiser」を試す – Takashi Q. Hanamura Photography&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノイズ除去させるにはいくつかの設定が必要です。しかし、レンダラーを ProRender に変更するとそれらの設定ができません。でも、Compositing で Render Layers から Denoise Node を通すだけでも効果はあるのでまぁ問題はないでしょう。&lt;/p&gt;
&lt;p&gt;では、以降で検証しますね。ちなみに ON が有効で OFF が無効って意味です。&lt;/p&gt;
&lt;h2 id="1rpr-denoiserdenoise-node-onoff"&gt;【検証 1】RPR Denoiser （全フィルタ）と Denoise Node ON/OFF で生成される画像とレンダリング時間の違い&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;データ：『&lt;a href="https://nnamm.work/posts/g0001-200322-blender-prac-still/"&gt;01. Practice (Still)&lt;/a&gt;』の真ん中あたりの作品&lt;/li&gt;
&lt;li&gt;Resolution ： 1920 x 1080px で出力&lt;/li&gt;
&lt;li&gt;Sampling ： Min/128、Max/256 （そのほかデフォルト設定）&lt;/li&gt;
&lt;li&gt;RPR Denoiser ：すべてデフォルト設定&lt;/li&gt;
&lt;li&gt;カッコ内はレンダリング時間（分 秒 ミリ秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1rpr-denoiseroff-donoise-nodeoff-1m18s33"&gt;① RPR Denoiser(OFF) &amp;amp; Donoise Node(OFF) [1m18s33]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;左手前部分のボケがノイジーです。&lt;/p&gt;
&lt;h3 id="2rpr-denoiseroff-donoise-nodeon-1m20s20"&gt;② RPR Denoiser(OFF) &amp;amp; Donoise Node(ON) [1m20s20]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;①に比べ、左手前部分のボケのノイジーさが緩和されました。最終的に僕のベストはこの設定です。&lt;/p&gt;
&lt;h3 id="3rpr-denoiserbilateral-donoise-nodeoff-1m19s29"&gt;③ RPR Denoiser(Bilateral) &amp;amp; Donoise Node(OFF) [1m19s29]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise2_Bilateral_1m19s29.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise2_Bilateral_1m19s29.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise2_Bilateral_1m19s29.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise2_Bilateral_1m19s29.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="4rpr-denoiserbilateral-donoise-nodeon-1m21s23"&gt;④ RPR Denoiser(Bilateral) &amp;amp; Donoise Node(ON) [1m21s23]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;③と④はどちらもあまり変わらない感じ。③の場合、中心付近に赤い斑点が目立ちますが、Denoise Node ON にすると消えます。&lt;/p&gt;
&lt;h3 id="5rpr-denoiserlocal-weighted-regression-donoise-nodeoff-1m21s71"&gt;⑤ RPR Denoiser(Local Weighted Regression) &amp;amp; Donoise Node(OFF) [1m21s71]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="6rpr-denoiserlocal-weighted-regression-donoise-nodeon-1m23s99"&gt;⑥ RPR Denoiser(Local Weighted Regression) &amp;amp; Donoise Node(ON) [1m23s99]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;③と④と同じ感想です。僕は Bilateral の方が好み。&lt;/p&gt;
&lt;h3 id="7rpr-denoiseredge-avoiding-wavelets-donoise-nodeoff-1m19s51"&gt;⑦ RPR Denoiser(Edge Avoiding Wavelets) &amp;amp; Donoise Node(OFF) [1m19s51]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="8rpr-denoiseredge-avoiding-wavelets-donoise-nodeon-1m21s15"&gt;⑧ RPR Denoiser(Edge Avoiding Wavelets) &amp;amp; Donoise Node(ON) [1m21s15]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Edge Avoiding Wavelets フィルタは独特です。ON にすると表面が流れているようになって、正直「え？これありなの？」と思ったくらいです。これが活かせるシーンはあるのでしょうけど、僕はわからなかったです。&lt;/p&gt;
&lt;h3 id="9rpr-denoisermachine-learning-donoise-nodeoff-1m22s65"&gt;⑨ RPR Denoiser(Machine Learning) &amp;amp; Donoise Node(OFF) [1m22s65]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="10rpr-denoisermachine-learning-donoise-nodeon-1m25s94"&gt;⑩ RPR Denoiser(Machine Learning) &amp;amp; Donoise Node(ON) [1m25s94]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;⑨も⑩もノイズ除去はいい感じだと思います。ただ、赤い斑点が消えませんでした。となると設定したテクスチャなどが影響していたりするのかもです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※Machine Learning について&lt;br/&gt;
Use Color AOV only というチェックボックスがあるのですが、ON にするとなぜか真っ暗画像がレンダリングされてしまうため OFF にしました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;レンダリング時間比較表（速い順）&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;パターン No.&lt;/th&gt;
&lt;th align="center"&gt;RPR Deniser&lt;/th&gt;
&lt;th align="center"&gt;Denoise Node&lt;/th&gt;
&lt;th align="center"&gt;レンダリング時間&lt;/th&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;①&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m18s33&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;③&lt;/td&gt;
&lt;td align="center"&gt;Bilateral&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m19s29&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑦&lt;/td&gt;
&lt;td align="center"&gt;Edge Avoiding&lt;br/&gt;Wavelets&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m19s51&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;②&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m20s20&lt;/td&gt;
&lt;td align="center"&gt;★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑧&lt;/td&gt;
&lt;td align="center"&gt;Edge Avoiding&lt;br/&gt;Wavelets&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m21s15&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;④&lt;/td&gt;
&lt;td align="center"&gt;Bilateral&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m21s23&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑤&lt;/td&gt;
&lt;td align="center"&gt;Local Weighted&lt;br/&gt;Regression&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m21s71&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑨&lt;/td&gt;
&lt;td align="center"&gt;Machine Learning&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m22s65&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑥&lt;/td&gt;
&lt;td align="center"&gt;Local Weighted&lt;br/&gt;Regression&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m23s99&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑩&lt;/td&gt;
&lt;td align="center"&gt;Machine Learning&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m25s94&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;レンダリングは 1 回しかしていませんし、検証はこのシーンデータでしかしていません。サンプルは少ないですが、基本指針としては★で良いんじゃないかな、という結論です。&lt;/p&gt;
&lt;h2 id="2rpr-denoiserbilateralonoff"&gt;【検証 2】RPR Denoiser （ Bilateral ） ON/OFF の違い&lt;/h2&gt;
&lt;p&gt;ここでは RPR Denoiser の各フィルタのうち、僕の好みの Bilateral を見てみます。もっと単純なシーンを使って、ON/OFF でどんな効果があるのか。なお、Denoise Node は常に ON です。&lt;/p&gt;
&lt;p&gt;結論をいうと、&lt;strong&gt;Bilateral ON にすると画像が眠くなりました。シャープさが損なわれた感じです。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ：すごく適当でシンプルなシーンデータ&lt;/li&gt;
&lt;li&gt;Sampling ： Min/64、Max/128 （そのほかデフォルト設定）&lt;/li&gt;
&lt;li&gt;RPR Denoiser ： Bilateral （デフォルト設定）&lt;/li&gt;
&lt;li&gt;Denoise Node ： ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;▼RPR Denoiser - Bilateral ON&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_2_bilateral-on-denoisenode-on.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_2_bilateral-on-denoisenode-on.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_2_bilateral-on-denoisenode-on.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_2_bilateral-on-denoisenode-on.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;▼RPR Denoiser - Bilateral OFF&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/007_2_bilateral-off-denoisenode-on.jpg" srcset="../../images/posts/derivatives/crisp/1x/007_2_bilateral-off-denoisenode-on.jpg 1x, ../../images/posts/derivatives/crisp/2x/007_2_bilateral-off-denoisenode-on.jpg 2x, ../../images/posts/derivatives/crisp/3x/007_2_bilateral-off-denoisenode-on.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;PC で見るとわかるのですが、中心の青い球体のエッジが Bilateral ON にすると眠くなっているように僕は感じます。&lt;/p&gt;
&lt;h2 id="_3"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ProRender を使うときは RPR Denoiser ではなく、Blender 標準の Denoise Node を使いましょう。得られる結果の期待値は高いと思われます。&lt;/p&gt;
&lt;p&gt;Denoise Node も RPR Denoiser も少ないサンプル数でレンダリング時間を短縮し、なおかつ綺麗な画像を生成するためのものです。Machine Learning が取り入れられたりして、これからもどんどん改善されていくはずです。&lt;/p&gt;
&lt;p&gt;技術は進歩していき、きっと楽にデノイズできる日は来るでしょうけど、常に試行錯誤は必要だろうな〜と思いました。&lt;/p&gt;
&lt;h2 id="_4"&gt;公式ドキュメント&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://radeon-pro.github.io/RadeonProRenderDocs/index.html" target="_blank"&gt;Welcome to AMD Radeon™ ProRender! — AMD Radeon ProRender&lt;/a&gt;&lt;/p&gt;</content><category term="Blender"/><category term="Blender"/><category term="macOS"/></entry><entry><title>Python｜きれいなコードを書くためにPyCharmを設定する</title><link href="/posts/006-write-cleancode-with-pycharm" rel="alternate"/><published>2020-05-18T18:30:00+09:00</published><updated>2020-07-02T09:30:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-05-18:/posts/006-write-cleancode-with-pycharm</id><summary type="html">&lt;p&gt;PyCharm できれいなコードを書くために以下のツールを設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCharm は標準設定でもコードチェックや整 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;PyCharm できれいなコードを書くために以下のツールを設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCharm は標準設定でもコードチェックや整形をやってくれます。それに加え、各種ツールを活用してコーディングルールに沿った開発をしていくことが目的です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本記事では、PyCharm にファイル監視機能をつけて、保存のたびにチェックする設定方法をまとめます。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【更新履歴】&lt;/strong&gt;&lt;br/&gt;
20.6.28｜isort の設定を変更。multi_line_output に関する設定を削除。import を 1 行表示とするために force_single_line=true を追加。&lt;br/&gt;
20.5.27｜isort を追加。flake8 の設定を変更（ 1 行の文字数を 120 → 88 ）。&lt;br/&gt;
20.5.21｜flake8 などの設定を見直し&lt;br/&gt;
20.5.18｜公開&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="file-watchers"&gt;File Watchers プラグイン（ファイル監視機能）&lt;/h2&gt;
&lt;p&gt;まずはファイルを監視してくれるプラグインを導入します。&lt;/p&gt;
&lt;p&gt;Preferences → Plugins → &lt;code&gt;file watchers&lt;/code&gt;と検索して Go!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;インストールすると、Preferences → Tools に&lt;code&gt;File Watchers&lt;/code&gt;の項目が追加されます。ここに各種ツールの設定を書きます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="black"&gt;Black （コードフォーマッター）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;は Python3.6 以上で使える超強力なコードフォーマッターです。PEP8 に準拠しているのはもちろん、「より制限のきつい PEP8」と言われている存在。ユーザーからはほとんど設定変更ができないガッチガチ仕様。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;The uncompromising code formatter&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;記事投稿時点ではベータ版なので、今後仕様変更される可能性はあります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;Black の設定は&lt;code&gt;pyproject.toml&lt;/code&gt;を使用します。プロジェクト直下に生成し、1 行の文字数を 88 （ Black デフォルト）にしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PyCharm の File Watchers は以下のようにします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Black （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;black --help&lt;/code&gt;やリファレンスを見ながら設定しました。&lt;/p&gt;
&lt;p&gt;「Tool to Run on Changes」は、CUI でコマンド入力する状態を GUI から設定できるってイメージ。Black は標準で&lt;code&gt;pyproject.toml&lt;/code&gt;を読み込むので、引数は Python のファイルパスだけです。&lt;/p&gt;
&lt;h3 id="xxxxxxxxxx"&gt;■$xxxxxxxxxx$について&lt;/h3&gt;
&lt;p&gt;プロジェクトディレクトリなどを表すショートカットです。「Tool to Run on Changes」の各欄の「+」をクリックすると選択できます。&lt;/p&gt;
&lt;h2 id="flake8"&gt;flake8 （静的文法チェックツール）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;は静的な文法チェックツール。以下をラッパーしており、使っていない変数のチェックなど、「これおかしいよー」という箇所を検出してくれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyFlakes&lt;/li&gt;
&lt;li&gt;pycodestyle&lt;/li&gt;
&lt;li&gt;Ned Batchelder’s McCabe script&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;設定ファイルは一元管理したいので&lt;code&gt;pyproject.toml&lt;/code&gt;に書きます。1 行の文字数を Black に合わせたり、循環的複雑度を設定しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;flake8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;complexity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;20&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-4.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-4.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-4.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-4.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;flake8 （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/flake8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--statistics --config $ContentRoot$/pyproject.toml --ignore E203,W503,W504 $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;flake8 --help&lt;/code&gt;やリファレンスを見ながら設定しました。&lt;/p&gt;
&lt;h3 id="ignore"&gt;■ignore の指定について&lt;/h3&gt;
&lt;p&gt;flake8 で特定の警告やエラーを無効にしたい場合は、toml ファイルにこう書きます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ignore = 'E203', 'W503', 'W504'&lt;br/&gt;（ Black との衝突を防ぐコード）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかし、なぜか PyCharm ではエラーとなります。toml にエラーがあると他のチェッカーが誤動作しますので、回避策として File Watchers で「--ignore」指定することにしました。（テープルの設定値参照）&lt;/p&gt;
&lt;h2 id="isort"&gt;isort （コードフォーマッター）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;は import/from 部分を PEP8 に準じてソートしてくれるフォーマッターです。Black はそこまで整形してくれないんですよね。&lt;/p&gt;
&lt;h3 id="_3"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;こちらも&lt;code&gt;pyproject.toml&lt;/code&gt;に書きます。Black との衝突を防ぐために文字数を合わせます。&lt;code&gt;multi_line_output&lt;/code&gt;には複数行になる場合のソート方法を指定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isort&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;line_length&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;force_single_line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mf"&gt;20.6.28&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;以下削除&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;include_trailing_comma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;multi_line_output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-8.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-8.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-8.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-8.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;isort （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/isort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;isort --help&lt;/code&gt;でいろいろ確認できます。&lt;/p&gt;
&lt;h3 id="_4"&gt;■ 導入時の注意点&lt;/h3&gt;
&lt;p&gt;isort を普通にインストールすると&lt;code&gt;~/.isort.cfg&lt;/code&gt;を参照します。&lt;code&gt;pyproject.toml&lt;/code&gt;で一元管理するためには&lt;code&gt;pip install 'isort[pyproject]'&lt;/code&gt;とするか、PyCharm からなら&lt;code&gt;Options&lt;/code&gt;に&lt;code&gt;pyporject&lt;/code&gt;を指定すれば OK です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-9.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-9.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-9.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-9.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="mypy"&gt;mypy （静的型ヒントチェッカー）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;は静的な型ヒントチェッカーです。flake8 と同じようなもので「適切に型ヒントかけているかな？」という観点でみてくれます。&lt;/p&gt;
&lt;h3 id="_5"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;こちらも&lt;code&gt;pyproject.toml&lt;/code&gt;に書いちゃいます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mypy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;ignore_missing_imports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-5.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-5.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-5.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-5.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;mypy （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/mypy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--config-file $ContentRoot$/pyproject.toml $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;mypy --help&lt;/code&gt;でいろいろ確認できます。&lt;/p&gt;
&lt;h2 id="pylint"&gt;Pylint （静的文法チェックツール）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;は静的な文法チェックツールです。flake8 と重複する部分もあるでしょうけど、両方採用して厳しめにチェックしてもいいだろうと。たとえば、flake8 と Pylint で引っ掛かったら、絶対に直すべきポイントだと思います。&lt;/p&gt;
&lt;h3 id="_6"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;Pylint も&lt;code&gt;pyproject.toml&lt;/code&gt;に設定できますが、&lt;code&gt;.pylintrc&lt;/code&gt;に書くことにしました。&lt;code&gt;pylint --generate-rcfile&lt;/code&gt;するとたくさんの標準設定があり、それらを有効にしておいた方が良いと考えたためです。&lt;/p&gt;
&lt;p&gt;ただ、このままだと多くの変数にたいして「大文字にせぃ」とのたまってきます。変数は小文字が普通だと思うのですが（ですよね？）&lt;/p&gt;
&lt;p&gt;というわけで、「名前について文句ゆーな」という設定や Black との衝突を防ぐための＋ α を&lt;code&gt;.pylintrc&lt;/code&gt;に書き込みます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 設定ファイル生成&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;pylint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rcfile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pylintrc&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;vim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pylintrc&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// [MESSAGES CONTROL]セクションの”disable=”に以下を追記&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;continuation&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// [FORMAT]セクションで1行当たりの文字数を他と揃える&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="c1"&gt;// [DESIGN]セクションで最低バブリックメソッド数を変更（必要に応じて）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kr"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kr"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-6.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-6.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-6.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-6.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;pylint （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/pylint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--rcfile $ContentRoot$/.pylintrc $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="pylint_1"&gt;■Pylint は基本的に無効&lt;/h3&gt;
&lt;p&gt;僕の環境では Pylint 処理にほんちょっと時間がかかります。保存のたびに「このちょっと」が気になるので、Pylint の自動処理を無効としておき、折を見て有効にしています。&lt;/p&gt;
&lt;p&gt;有効・無効は File Watchers 設定画面のチェックボックス ON/OFF でできます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;しばらく使ってみたところ、ちょっとした時間はとくに気にならないため常に有効としました。（ 2020.5.21 ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_7"&gt;設定ファイルはエクスポートしておくと楽&lt;/h2&gt;
&lt;p&gt;これまで設定したものを他のプロジェクトに流用できるよう、設定ファイルのインポート／エクスポート機能があります。&lt;/p&gt;
&lt;p&gt;File Watchers 設定画面の下部にある矢印アイコンがそれ。右上矢印がエクスポート、左下矢印がインポート。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-7.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-7.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-7.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-7.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;や&lt;code&gt;.pylintrc&lt;/code&gt;も一緒に保存しておくと非常に楽ですよ。&lt;/p&gt;
&lt;h2 id="_8"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;Python の良い点に「コードの読みやすさ」があります。でも、PEP8 などのルールを無視して書いていたらその良さは活かせません。だから、この手のことは IT の力に任せちゃいましょう。&lt;/p&gt;
&lt;p&gt;今回は PyCharm で設定しましたけど、Visual Studio Code でも同様の設定はできるので、自分の好きなエディタで開発を楽しんでいけばいいと思います。&lt;/p&gt;
&lt;h2 id="_9"&gt;参考にさせていただいた記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://logmi.jp/tech/articles/322611" target="_blank"&gt;Python 開発を円滑に進めるためのツール設定 Part.1 - ログミー Tech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことの発端となった記事です。実務はこうなのか〜と知って「じゃあ、僕もやってみよう」となったのでした。&lt;/p&gt;
&lt;p&gt;そのほかの参考記事はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/navitime_tech/items/0a431a2d74c156d0bda2" target="_blank"&gt;black と pylint を使った快適な Python 開発 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hirokiky.org/entry/2019/06/03/202745" target="_blank"&gt;もう Python の細かい書き方で議論しない。black で自動フォーマットしよう - Make 組ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"/><category term="PyCharm"/><category term="Python"/></entry><entry><title>Gridsome｜v-ifを使いテンプレート内でデザインを分ける</title><link href="/posts/005-separate-the-designs" rel="alternate"/><published>2020-05-04T14:00:00+09:00</published><updated>2020-05-04T14:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-05-04:/posts/005-separate-the-designs</id><summary type="html">&lt;p&gt;Gridsome には「multiple templates for a collection」という仕組みがあって、1 つのコレクションを複数のテンプレートに対応させることができます …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Gridsome には「multiple templates for a collection」という仕組みがあって、1 つのコレクションを複数のテンプレートに対応させることができます。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://gridsome.org/docs/templates/" target="_blank"&gt;Templates - Gridsome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;基本的にコレクション（ md ファイル等）とテンプレート（ vue ファイル）は 1 対 1 の関係ですが、任意のページだけ専用のテンプレートを適用できるもの、と僕は理解してます。&lt;/p&gt;
&lt;p&gt;しかし、Build すると同じ記事データが複数生成されてしまい、記事の重複が起こりました。&lt;/p&gt;
&lt;p&gt;dist をそのままサーバーにアップロードしたら SEO 的にどうなの？と考えた末、ひとまず、テンプレート内で「v-if / v-if-else / v-else」を使って乗り切ることにしました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/005_200504-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/005_200504-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/005_200504-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/005_200504-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;記事が重複する？&lt;/h2&gt;
&lt;p&gt;サイト公開当初は 1 種類のコレクション（ Markdown ）から GraphQL の Filter を使って、3 種類のコンテンツを抽出していました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// コンテンツ抽出イメージ

コレクション（*.md）
|
|___ Blogコンテンツ（Post.vue）
|___ Graphicコンテンツ（Graphic.vue）
|___ Photoコンテンツ（Photo.vue）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// gridsome.config.js（サイト公開当初の設定、一部抜粋）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'@gridsome/source-filesystem'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'static/posts/**/**/*.md'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;typeName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;remark&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'@gridsome/remark-prismjs'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="nx"&gt;中略&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// ブログ用&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/posts/:slug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'./src/templates/Post.vue'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// グラフィック作品用&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/graphics/:slug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'./src/templates/Graphic.vue'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;// 写真作品用&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/photos/:slug'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'./src/templates/Photo.vue'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;↑ をすることで上手いこと生成してくれるかと思いきや・・・以下のようにファイルが生成されてしまいました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;// この重複っぷりったら（笑）

dist
|
|__ posts
|   |__ Blogコンテンツ1
|   |   |__ index.html
|   |__ Blogコンテンツ2
|   |   |__ index.html
|   |__ Graphicコンテンツ1（本来不要）
|   |   |__ index.html
|   |__ Photoコンテンツ1（本来不要）
|   |   |__ index.html
|   |__ Photoコンテンツ2（本来不要）
|       |__ index.html
|
|__ graphic
|   |__ Blogコンテンツ1（本来不要）
|   |   |__ index.html
|   |__ Blogコンテンツ2（本来不要）
|   |   |__ index.html
|   |__ Graphicコンテンツ1
|   |   |__ index.html
|   |__ Photoコンテンツ1（本来不要）
|   |   |__ index.html
|   |__ Photoコンテンツ2（本来不要）
|       |__ index.html
|
|__ photo
    |__ Blogコンテンツ1（本来不要）
    |   |__ index.html
    |__ Blogコンテンツ2（本来不要）
    |   |__ index.html
    |__ Graphicコンテンツ1（本来不要）
    |   |__ index.html
    |__ Photoコンテンツ1
    |   |__ index.html
    |__ Photoコンテンツ2
        |__ index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;URL としてはすべてのルートが生成されているので、このままサーバーにアップロードしたら同じ記事だらけで「どれが本物か！？」と Google さんは思うでしょう。実際、Search Console には「重複してるよ」って言われました。&lt;/p&gt;
&lt;p&gt;というわけで対策を考えます。&lt;/p&gt;
&lt;h2 id="1-robotstxt"&gt;対策(1) robots.txt → 失敗&lt;/h2&gt;
&lt;p&gt;まず思いついたのは robots.txt です。&lt;/p&gt;
&lt;p&gt;Gridsome の gridsome-plugin-robots プラグインを使って、特定の URL のみ disallow とすることでした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// gridsome.config.js（サイト公開当初の設定、一部抜粋）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="nx"&gt;中略&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'gridsome-plugin-robots'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'https://portfolio.nnamm.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;sitemap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'https://portfolio.nnamm.com/sitemap.xml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;policy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nx"&gt;disallow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/posts/p0*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/posts/g0*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/photos/b0*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/photos/g0*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/graphics/b0*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="s1"&gt;'/graphics/p0*'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、これは disallow が約束されたものではありません。想定していない URL がインデックスされる可能性がありますし、実際されちゃいました。&lt;/p&gt;
&lt;h2 id="2-v-if"&gt;対策(2) v-if を使って分ける → 成功&lt;/h2&gt;
&lt;p&gt;もともと Blog/Graphic/Photo それぞれにテンプレート（ vue ファイル）を作り、デザインを分けていましたが、&lt;strong&gt;1 つの vue ファイルに統合して、処理を切り分ければ良いんじゃなーい？&lt;/strong&gt;と気づきます。&lt;/p&gt;
&lt;p&gt;「これだ！」というわけで、ベストプラクティスかはわかりませんが以下のようにしました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;URL のスラッグの先頭に投稿タイプの文字列を追加（ Blog なら b、Graphic なら g、Photo なら p → 例. b0001-200322-start-portfolio-site ）&lt;/li&gt;
&lt;li&gt;computed で GraphQL からスラッグの頭文字を取得&lt;/li&gt;
&lt;li&gt;v-if="postType === 'b'"のようにして処理を分ける&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Post.vue（一部抜粋）&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"postType === 'b'"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Blog用のデザイン&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"postType === 'g'"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Graphic用のデザイン&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Photo用のデザイン&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;〜&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/template&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/Layout&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/template&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;postType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;※&lt;/span&gt;&lt;span class="nx"&gt;$pageでGraphQLした結果にアクセスできるのでslugから文字を取得&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YYYY.MM.DD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"YYYY.MM.DD"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/page-query&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;結果、Build すると想定したものだけが生成されていました。スッキリ！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dist
|
|__ posts
    |__ Blogコンテンツ1
    |   |__ index.html
    |
    |__ Blogコンテンツ2
    |   |__ index.html
    |
    |__ Graphicコンテンツ1
    |   |__ index.html
    |
    |__ Photoコンテンツ1
    |   |__ index.html
    |
    |__ Photoコンテンツ2
        |__ index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_2"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;Vue.js の条件付きンダリングを使って対応した、というお話でした。&lt;/p&gt;
&lt;p&gt;Gridsome はこのような仕様でしたが（僕の使い方が正しいか判断できませんが）、他の SSG はどうなんでしょうね。有名な Nuxt.js や Gatsby.js なんかも同じような感じなのかな。興味が湧いてきました。&lt;/p&gt;
&lt;p&gt;とはいえ、まずは無駄なファイルが生成されずスッキリして良かったです。サーバーのディレクトリ構成や URL にこだわりがなければ、この対応で良いと思いますね。&lt;/p&gt;
&lt;p&gt;あとは Search Console のインデックスが更新されたらオッケー。しばらく様子見です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/005_200504-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/005_200504-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/005_200504-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/005_200504-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※掲載した写真は春の大阪城公園を RICOH GR で撮影&lt;/p&gt;</content><category term="Creative"/><category term="Gridsome"/><category term="Vue.js"/></entry><entry><title>Python｜はじめてのunittest、使い方を整理してみる</title><link href="/posts/004-python-first-unittest" rel="alternate"/><published>2020-04-29T17:34:36+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-04-29:/posts/004-python-first-unittest</id><summary type="html">&lt;p&gt;これまで Python スクリプトを組んできたものの、いずれもユニットテストは未実施。自分仕様ですから「そこまでしなくて …&lt;/p&gt;</summary><content type="html">&lt;p&gt;これまで Python スクリプトを組んできたものの、いずれもユニットテストは未実施。自分仕様ですから「そこまでしなくても」となりがち。でも、実際の現場ではテストは必須。潜在的なバグに気づけますからね。&lt;/p&gt;
&lt;p&gt;実は昨今のテストって仕組みがややこしそう・・・と敬遠してましたが、それではいつまで経ってもレベルアップできませんのでユニットテストにチャレンジしました。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8.2&lt;/li&gt;
&lt;li&gt;テストフレームワーク：&lt;a href="https://docs.python.org/ja/3/library/unittest.html" target="_blank"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テスト対象：&lt;a href="https://github.com/nnamm/md-generator" target="_blank"&gt;md-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考「&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;Python と Automator でブログ執筆環境の自動起動ツールをつくってみた&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-a.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-a.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-a.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-a.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;テストの準備&lt;/h2&gt;
&lt;h3 id="_3"&gt;テストファイルの作成&lt;/h3&gt;
&lt;p&gt;まずはテストファイルを作ります。「test_ + テスト対象モジュール名.py」とするのが習わしなので、「test_gen_md_generator.py」となります。&lt;/p&gt;
&lt;p&gt;コードはこんな感じになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# test_gen_md_generator.py&lt;/span&gt;

&lt;span class="sd"&gt;""" md-generator のユニットテストケース """&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gen_md_file&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;md&lt;/span&gt;

&lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"006"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/Users/nnamm.work/Develop/MyProject/_test/006"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"created_date_long"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2020-04-29 15:00:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"200429"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"eye_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/ec/blog/ec_blog_006.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"slug_str"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"006-200429-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"post_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;TEST_ANS_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"006_200429.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"img"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeneratorMdTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" テストクラス """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;""" フロントマター情報の確認 """&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertDictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/Users/nnamm.work/Develop/MyProject/_test/"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;""" ディレクトリとファイル生成の確認 """&lt;/span&gt;

        &lt;span class="c1"&gt;# まずディレクトリとファイルを作成&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# ディレクトリとファイルが正しく作成されているか確認（詳細な中身は目視確認とする）&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/Users/nnamm/Develop/MyProject/_test/006/"&lt;/span&gt;
        &lt;span class="n"&gt;files_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;files_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertListEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TEST_ANS_LIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;テストコードの説明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;import&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
「unittest」と「テスト対象とモジュール」をインポートして、クラスの中に「def test_XXXXXX」でテストケースを作っていきます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;TEST_ANS_DICT / TEST_ANS_LIST&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
assert で評価される値です。テストケースに定数を書いて良いものか標準的なルールを知らないため、そこらへんはご容赦を。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;setUp() / tearDown()&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
各テストの実施前後にさせたい処理を書きます。たとえば print("Test Start")、print("Test End")としてコンソールログを見やすくしたり、オブジェクトを破棄したりのお掃除系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;def test_create_front_matter_info(self)&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
Front matter を生成する処理で dict が返ります。テスト用のディレクトリを準備し、想定される結果（ TEST_ANS_DICT ）と assertDictEqual しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;def test_generate_blog_file(self)&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
Front matter を含めた md ファイルを生成する処理です。とくに return されるものはなく、ディレクトリとファイルが生成されます。&lt;/p&gt;
&lt;p&gt;さて、ここでは何を確認するべきか？&lt;/p&gt;
&lt;p&gt;想定されたディレクトリ・ファイル構造になったかどうかを評価することにしました。そのために os.listdir()したものを assertListEqual しています。&lt;/p&gt;
&lt;p&gt;実際のファイルは開いて中身を目視確認すればいいでしょう。&lt;/p&gt;
&lt;h2 id="_5"&gt;テストの実行&lt;/h2&gt;
&lt;p&gt;テストコードを PyCharm で走らせてみます。&lt;/p&gt;
&lt;h3 id="edit-configurations"&gt;Edit Configurations&lt;/h3&gt;
&lt;p&gt;Edit Configurations から設定します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Add New Configuration から unittests を選択したら、適当な Name をつけて対象スクリプトを選択して OK します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../../images/posts/004_200429-2.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="run"&gt;Run&lt;/h3&gt;
&lt;p&gt;うまくいけば「Tests passed」が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;assert で想定した結果にならなかった場合、どこが間違っているか表示されるので修整もやりやすかったです。&lt;/p&gt;
&lt;h2 id="_6"&gt;やって良かったこと&lt;/h2&gt;
&lt;p&gt;潜在的なバグを見つけたことですね。&lt;/p&gt;
&lt;p&gt;具体的には「create_front_matter_info」で「Python list index out of range」が起こる可能性があります。&lt;/p&gt;
&lt;p&gt;この関数にはリストから最後の要素を取り出す処理があります。でも、そもそもリストがなければエラーとなります。僕の環境では起こらないので対処しなくてもいいけれど、せっかくなので該当箇所に try 〜 catch をいれました。&lt;/p&gt;
&lt;p&gt;「改修した」感ゲット（笑）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py（対応前）&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="err"&gt;★&lt;/span&gt;&lt;span class="n"&gt;ここ&lt;/span&gt;
&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;work_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py（対応後）&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;work_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"作成できません。対象ディレクトリを確認してください。：&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_7"&gt;不明点&lt;/h2&gt;
&lt;p&gt;datetime で now()を使って現在日時を取得している値の正確性を得るためには、テストケースとしてどうすれば良いかわかりませんでした。普通であれば絶対にイコールになることはないですから。&lt;/p&gt;
&lt;p&gt;しゃーないので、テストのときだけテスト対象のモジュールに任意の日時を指定するロジックを加えて回避しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py&lt;/span&gt;

&lt;span class="c1"&gt;# 新記事の作成日時（long: YYYY-MM-DD HH:MM:SS / short: YYMMDD）&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# dt = datetime.datetime(2020, 4, 29, 15).strftime("%Y-%m-%d %H:%M:%S")  # unittest用に日時指定&lt;/span&gt;
&lt;span class="err"&gt;↑★&lt;/span&gt;&lt;span class="n"&gt;ここ&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;テスト時だけコメントアウトする&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;※おそらく unittest.mock を使うのかも。今回は調査していませんので次の課題です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_8"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;初歩の初歩とはいえユニットテストをやり切りました！&lt;/p&gt;
&lt;p&gt;今回得たことは「テストしやすいコードはどうすれば組めるか？」という視点ですね。複雑な処理を重ねてやることもあるでしょうけど、ややこしい処理は分解してシンプルに組めばテストしやすくなるはず。&lt;/p&gt;
&lt;p&gt;テストしやすいということは、コード品質を上げやすいということ。&lt;/p&gt;
&lt;p&gt;だからといって、やたらと分解していいものでもないと思いますので、その塩梅は開発を経験し、センスが磨かれていくことで掴めていくものでしょう。センスはやればやるほど自然と磨かれているものだからね。&lt;/p&gt;
&lt;p&gt;ユニットテスト、いい経験と気づきになりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-b.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-b.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-b.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-b.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※写真は大阪城公園を RICOH GR で撮影&lt;/p&gt;</content><category term="Python"/><category term="Python"/></entry><entry><title>Python｜Pyftpsyncを使ってローカルとリモートを同期する</title><link href="/posts/003-python-ftp-sync" rel="alternate"/><published>2020-04-05T20:30:00+09:00</published><updated>2021-06-19T13:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-04-05:/posts/003-python-ftp-sync</id><summary type="html">&lt;p&gt;静的サイトジェネレーターでサイトを作ると当然のことながら静的ファイルが生成されます。WordPress とは異なり、記事公 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;静的サイトジェネレーターでサイトを作ると当然のことながら静的ファイルが生成されます。WordPress とは異なり、記事公開までのステップはちょっと手間がかかります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;記事を書く&lt;/li&gt;
&lt;li&gt;ビルドしてサイトデータを生成&lt;/li&gt;
&lt;li&gt;レンタルサーバーにすべてのファイルをアップロード&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;だから、GitHub pages を使っている方もいらっしゃると思います。push とともにデプロイされるのは楽ですからね。&lt;/p&gt;
&lt;p&gt;また、&lt;a href="https://vercel.com/" target="_blank"&gt;Vercel&lt;/a&gt;
を使うのもありでしょう。push とともに専用サーバーにデプロイされますし、独自ドメインを持っていればリダイレクトもできるようです。&lt;/p&gt;
&lt;p&gt;でも、僕はすでに持っている独自ドメインや WordPress で使っているレンタルサーバーがあるのでこれらを流用したい。それじゃあってことで、公開までさくっとやってくれるスクリプトを組みました。&lt;/p&gt;
&lt;p&gt;Pyftpsync ライブラリを使い、&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;前回と同じく&lt;/a&gt;、Automator を使ってアプリケーション化しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="pyftpsync"&gt;Pyftpsync とは&lt;/h2&gt;
&lt;p&gt;Martin Wendt さんがつくられている Python ライブラリで&lt;strong&gt;「ローカルとリモートを rsync コマンド風にやってくれるもの」&lt;/strong&gt;と僕は理解しています。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://pyftpsync.readthedocs.io/en/latest/index.html" target="_blank"&gt;Pyftpsync&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ただし、既知の制限があります。最たるものは 2 つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;差分検知はファイルサイズと変更日から判断している&lt;/li&gt;
&lt;li&gt;ローカルフォルダ内に個別のメタデータファイルをつくり、最後の同期時刻とサイズを保存することで差分を検出する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このことから Gridsome を使っているとこうなります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 配下の画像ファイルなど同一同名でも「差分あり」となる&lt;/li&gt;
&lt;li&gt;ビルドすると dist 配下のすべてのファイルが全削除＆再生成されるため、上記 2 の効果がない&lt;/li&gt;
&lt;li&gt;結果、ほとんどのファイルがアップロード対象となる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当初の僕の希望である&lt;strong&gt;「rsync コマンドのように差分だけがアップロードされればデプロイも短時間で済むじゃん」&lt;/strong&gt;は達成できませんでした。&lt;/p&gt;
&lt;p&gt;でもメリットもちゃんとあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手動でアップロードするよりだんぜん楽&lt;/strong&gt;ということ。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="pyftpsync_1"&gt;Pyftpsync の使い方&lt;/h2&gt;
&lt;p&gt;公式のとおりに作ればとてもカンタン。使いやすい設計です。以下は同期モードの例で、他にアップロードモードがあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.ftp_target&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.targets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.synchronizers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;


&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ローカルディレクトリパス"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"リモートディレクトリパス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"FTPサーバーアドレス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FTPアカウント"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FTPパスワード"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# Trueの場合、FTPSが有効&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# オプション設定例&lt;/span&gt;
&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"resolve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;  &lt;span class="c1"&gt;# コンフリクトした場合はローカルファイルを優先&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# 同期の実行&lt;/span&gt;
&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※デフォルトではコンソールにログ出力されますので、今何やっているかが分かります。&lt;/p&gt;
&lt;h2 id="_1"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;WordPress や note を使ってきて、「公開までの仕組みがすべてつくられていること」ってすごいことだなと痛感しています。で、ここにきて SSG を使ってのサイト運営ですよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「手間かかることを楽しんでいる」感があります（笑）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;でもね、その結果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;楽するためにどうするか？&lt;/li&gt;
&lt;li&gt;効率化するためできることはあるか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という視点が磨かれてきましたし、なければつくってしまえ、という思考&amp;amp;行動パターンになってきました。エンジニアに復帰した僕としては、これはとても望ましい成長と思っています。&lt;/p&gt;
&lt;p&gt;ひとつひとつ作っていく感覚は楽しいです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;最近はコロナのせいで自宅に籠る時間ができました。だからこそ、思いっきり勉強したり、思いっきり怠惰をむさぼったり、これまでの生活スタイルを進化させられるんじゃないか、と僕は思います。&lt;/p&gt;
&lt;p&gt;たとえば、当たり前と言われているものの反対をやってみて、人間としての幅を広げられたらいいんじゃないかな。&lt;/p&gt;
&lt;p&gt;「より良い未来のために、今できることをする」です。&lt;/p&gt;
&lt;h2 id="sync_gridsomepy"&gt;参考： sync_gridsome.py&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;""" pyftpsyncライブラリを同期モードで使用し、Gridsomeでビルドしたデータ（dist/）をデプロイ先と同期する """&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging.handlers&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.ftp_target&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.targets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.synchronizers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_pyftpsync_logger&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_gridsome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    指定のローカルとリモートディレクトリを同期する&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ローカルとリモートの設定&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"LOCAL"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"USER"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"REMOTE"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;# リモートディレクトリパス&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"SERVER"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;# FTPサーバ&lt;/span&gt;
        &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# FTPS有効&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# オプション設定&lt;/span&gt;
    &lt;span class="c1"&gt;# ローカル優先／--deleteオプション有効／指定ディレクトリは同期除外&lt;/span&gt;
    &lt;span class="c1"&gt;# opts = {"resolve": "local", "delete": True, "force": True}&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"resolve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# 同期の実行&lt;/span&gt;
    &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ロガーの設定&lt;/span&gt;
    &lt;span class="c1"&gt;# pyftpsync.logにログを残す&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sync.gridsome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./pyftpsync.log"&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WatchedFileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;set_pyftpsync_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 同期&lt;/span&gt;
    &lt;span class="n"&gt;sync_gridsome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;▶ 最新版は&lt;a href="https://github.com/nnamm/gridsome_sync" target="_blank"&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content><category term="Python"/><category term="macOS"/><category term="Python"/></entry><entry><title>PythonとAutomatorでブログ執筆ツールをつくりました</title><link href="/posts/002-startup-blog-writing-env" rel="alternate"/><published>2020-03-29T01:06:42+09:00</published><updated>2021-06-19T13:30:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-03-29:/posts/002-startup-blog-writing-env</id><summary type="html">&lt;p&gt;静的サイトジェネレーター（ SSG ）で作ったサイトの記事は Markdown ファイルで管理します。&lt;/p&gt;
&lt;p&gt;WordPress でいう Title、Date、Description、Category、tags などの設定も …&lt;/p&gt;</summary><content type="html">&lt;p&gt;静的サイトジェネレーター（ SSG ）で作ったサイトの記事は Markdown ファイルで管理します。&lt;/p&gt;
&lt;p&gt;WordPress でいう Title、Date、Description、Category、tags などの設定もできて、ファイルの冒頭に Front matter と呼ばれるデータを書きこむことで、SSG がよしなに判断してあれこれしてくれます。&lt;/p&gt;
&lt;p&gt;ただ、記事を書くたびに&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルを作成&lt;/li&gt;
&lt;li&gt;Front matter （定型文）をコピペ&lt;/li&gt;
&lt;li&gt;タイトルや日付などを入力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;するのは手間がかかるので macOS の Automator を使ってツールを 2 つ作りました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Markdown ファイルを作り、任意のエディタを起動するアプリ&lt;/li&gt;
&lt;li&gt;gridsome develop を起動し、指定のブラウザで localhost に接続するショートカットキー&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この記事では Python や Automator をどのように使ったかをまとめます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2021 年 6 月現在、SSG を Gridsome から Pelican に変更しました。Front 
matter の中身も変わったため、掲載している内容やスクリプトが現在とは若干異なっています。でも、本筋は変わっていませんので参考になるかと思います。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="1-markdown"&gt;1. Markdown ファイルを作り、任意のエディタを起動するアプリ&lt;/h2&gt;
&lt;p&gt;※記事の最後にソースコードを載せました。参考にどうぞ。&lt;/p&gt;
&lt;h3 id="pythonmarkdown"&gt;Python で Markdown ファイルを作る&lt;/h3&gt;
&lt;p&gt;僕のサイトでは以下のように記事ファイルと画像ファイルを配置しています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/static/posts/blog/
                 &lt;span class="p"&gt;|&lt;/span&gt;
                 &lt;span class="p"&gt;|&lt;/span&gt;__001/
                 &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;__img/
                 &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;__001_200322.md
                 &lt;span class="p"&gt;|&lt;/span&gt;
                 &lt;span class="p"&gt;|&lt;/span&gt;__002
                 &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;__img/
                 &lt;span class="p"&gt;|&lt;/span&gt;    &lt;span class="p"&gt;|&lt;/span&gt;__002_YYMMDD.md
                 &lt;span class="p"&gt;|&lt;/span&gt;
                （以降、003、004と記事ごとに増えていく）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「ディレクトリ名が 1 つずつ加算されている」部分やファイル名の「YYMMDD」などがプログラミングの使い所。&lt;/p&gt;
&lt;p&gt;ディレクトリやファイル操作をすればいいので Pathlib モジュールを使います。パスをオブジェクトとして操作できるようになります。 &lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.python.org/ja/3/library/pathlib.html" target="_blank"&gt;pathlib --- オブジェクト指向のファイルシステムパス&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次は Front matter です。&lt;/p&gt;
&lt;p&gt;これは以下のようなデータ群になってます。「$」ではじまっている変数はスクリプトを実行するたびに設定します。これを毎回コピペするのはすっごく面倒なのでここでもプログラミングの力を使いましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
title:
date: &lt;span class="nv"&gt;$date&lt;/span&gt;
createdAt: &lt;span class="nv"&gt;$date&lt;/span&gt;
updatedAt: &lt;span class="nv"&gt;$date&lt;/span&gt;
description:
image: &lt;span class="nv"&gt;$image&lt;/span&gt;
slug: &lt;span class="nv"&gt;$slug&lt;/span&gt;
category:
tags:
type: &lt;span class="nv"&gt;$type&lt;/span&gt;
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「$」は定型文や動的にテキストデータを設定するところなので、String モジュールの template を使います。&lt;/p&gt;
&lt;p&gt;参考：&lt;a href="https://docs.python.org/ja/3/library/string.html" target="_blank"&gt;string --- 一般的な文字列操作&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使い方はかんたんで、Front matter の定義ファイルを開いて、substitute()で$変数に値を入れる。それを Markdown ファイルに write()で OK です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_file.py（一部抜粋）&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="n"&gt;md_full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.md"&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"template/front_matter.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md_full_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="automator"&gt;Automator からスクリプトを実行してエディタを起動する&lt;/h3&gt;
&lt;p&gt;スクリプトは作れたけど、新しく記事を書くたびに python コマンドを叩くのは手間です。それにどうせなら Markdown ファイルを開いてすぐブログを書きはじめられたら素敵じゃないですか。&lt;/p&gt;
&lt;p&gt;そんなときは Automator にシェルコマンドを入力してもらいましょう。&lt;/p&gt;
&lt;p&gt;Automator を起動して「アプリケーション」を選択。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Automator で Python を実行するには、シェルから実行してもらうようにしないといけません。以下の順番でつなげていきます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;シェルスクリプトを実行&lt;/li&gt;
&lt;li&gt;指定された Finder 項目を取得&lt;/li&gt;
&lt;li&gt;Finder 項目を開く(お好きなアプリを選択)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;シェル実行時に Markdown ファイルの絶対パスを print()で出力しています。それが「指定された Finder 項目を取得」につながって、次の「Finder 項目を開く」へとつながっていきます。&lt;/p&gt;
&lt;p&gt;さらに、どうせなら Automator で作ったアプリのアイコンも変えましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;まず、Automator で作たアプリの情報ウィンドウを表示させます。次に左上のアイコンを選択状態にしてから、あらかじめクリップボードにコピーしておいた画像を command+v してあげれば OK です。&lt;/p&gt;
&lt;h2 id="2-gridsome-developlocalhost"&gt;2. gridsome develop を起動し、指定のブラウザで localhost に接続するショートカットキー&lt;/h2&gt;
&lt;p&gt;記事を書きながらプレビューできたら便利ですよね。今回はショートカットキーで起動するようにします。&lt;/p&gt;
&lt;p&gt;Automator を起動して「クイックアクション」を選択。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-4.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-4.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-4.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-4.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;以下の順でつなげていきます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指定された Finder 項目を取得（後述のコマンドファイルを指定）&lt;/li&gt;
&lt;li&gt;Finder 項目を開く&lt;/li&gt;
&lt;li&gt;一時停止（ビルドにちょっと時間がかかるため一休み）&lt;/li&gt;
&lt;li&gt;シェルスクリプトを実行（ブラウザのフルパス + URL ）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-5.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-5.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-5.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-5.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;コマンドファイル&lt;/h3&gt;
&lt;p&gt;「シェルスクリプトを実行」から直接 gridsome develop をすると、ctrl+c で Gridsome のプロセスを停止できません。僕から見えない誰かがプロセスを握ってしまっているためだと思います。&lt;/p&gt;
&lt;p&gt;なので、以下のコマンドファイルを作り、Terminal を起動してから実行してあげる必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ touch _start_gridsome.command
$ vim _start_gridsome.command

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Develop/MyProject/gridsome_nnamm/
gridsome develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行権限をつけるのを忘れずに。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ chmod a+x _start_gridsome.command
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_2"&gt;ショートカットキーの設定&lt;/h3&gt;
&lt;p&gt;クイックアクションは macOS のサービスとして扱われるため、システム環境設定から任意のショートカットキーを割り当ててあげましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/002_200329-6.jpg" srcset="../../images/posts/derivatives/crisp/1x/002_200329-6.jpg 1x, ../../images/posts/derivatives/crisp/2x/002_200329-6.jpg 2x, ../../images/posts/derivatives/crisp/3x/002_200329-6.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;以上で完成です。&lt;/p&gt;
&lt;h2 id="_3"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;これで、アプリアイコンをダブルクリックするだけでブログが書けるようになりました。また、必要に応じてショートカットキーでプレビュー画面を起動するということもできました。&lt;/p&gt;
&lt;p&gt;大満足！&lt;/p&gt;
&lt;h2 id="gen_md_filepy"&gt;参考： gen_md_file.py&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;新規ブログ記事の雛形Markdownファイルを作るスクリプト&lt;/span&gt;
&lt;span class="sd"&gt;所定のディレクトリに、以下のディレクトリを作成する&lt;/span&gt;
&lt;span class="sd"&gt;...blog/&lt;/span&gt;
&lt;span class="sd"&gt;      |__001&lt;/span&gt;
&lt;span class="sd"&gt;           |_img/&lt;/span&gt;
&lt;span class="sd"&gt;           |_001_YYMMDD.md（フロントマター含）&lt;/span&gt;
&lt;span class="sd"&gt;"""&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;""" フロントマター用のデータを作成する&lt;/span&gt;
&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        work_dir: 所定のディレクトリパス&lt;/span&gt;
&lt;span class="sd"&gt;    Returns:&lt;/span&gt;
&lt;span class="sd"&gt;        dict: フロントマターに設定する情報&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;fm_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 新記事を格納するディレクトリ名（作業用）&lt;/span&gt;
        &lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 上記を含めたフルパス&lt;/span&gt;
        &lt;span class="s2"&gt;"created_date_long"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 記事作成日時ロング版（スクリプト実行日時）&lt;/span&gt;
        &lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 上記のショート版&lt;/span&gt;
        &lt;span class="s2"&gt;"eye_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# アイキャッチの画像のパス&lt;/span&gt;
        &lt;span class="s2"&gt;"slug_str"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# スラッグ&lt;/span&gt;
        &lt;span class="s2"&gt;"post_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# ポストタイプはblog&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# 新記事のディレクトリ名（ゼロパディング）とフルバス&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;dir_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;work_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# 新記事の作成日時（long: YYYY-MM-DD HH:MM:SS / short: YYYYMMDD）&lt;/span&gt;
    &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"created_date_long"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# アイキャッチの画像パス&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eye_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'/ec/blog/ec_blog_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.jpg'&lt;/span&gt;

    &lt;span class="c1"&gt;# スラッグ&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"slug_str"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;-'&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" 新記事のディレクトリとファイルを作成する&lt;/span&gt;
&lt;span class="sd"&gt;    Args:&lt;/span&gt;
&lt;span class="sd"&gt;        params: フロントマターに設定する情報&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;dir_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;dir_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;l_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"created_date_long"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;s_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;img_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"eye_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"slug_str"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;post_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"post_type"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# ディレクトリを作成&lt;/span&gt;
    &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"/img/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# mdファイルにテンプレートからフロントマターを設定&lt;/span&gt;
    &lt;span class="n"&gt;md_full_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dir_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.md"&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"template/front_matter.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substitute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;l_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;img_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;post_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md_full_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;new_md&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# macOSのAutomatorと連携するために引数としてファイルパスを出力&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md_full_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;blog_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;▶︎ 最新版は&lt;a href="https://github.com/nnamm/md-generator" target="_blank"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;※勉強がてら flake8/pylint/black を PyCharm に導入してみました。pytest もやってみようと思います。&lt;/p&gt;</content><category term="Creative"/><category term="macOS"/><category term="Python"/></entry><entry><title>Gridsomeでポートフォリオサイト、はじめました</title><link href="/posts/001-start-portfolio-site" rel="alternate"/><published>2019-03-22T00:00:00+09:00</published><updated>2020-10-06T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2019-03-22:/posts/001-start-portfolio-site</id><summary type="html">&lt;p&gt;はじめまして、ソフトウェアエンジニア＆写真家の花村貴史です（&lt;a href="https://twitter.com/nnammg" target="_blank"&gt;@nnammg&lt;/a&gt;）。ニックネームは「はなむら」の間をとって「なむ」です。&lt;/p&gt;
&lt;p&gt;横 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;はじめまして、ソフトウェアエンジニア＆写真家の花村貴史です（&lt;a href="https://twitter.com/nnammg" target="_blank"&gt;@nnammg&lt;/a&gt;）。ニックネームは「はなむら」の間をとって「なむ」です。&lt;/p&gt;
&lt;p&gt;横浜で生まれ育ち、脱サラ信州移住をへて、今は関西で妻と二人暮らしをしています。どんどん西に向かっています（笑）&lt;/p&gt;
&lt;p&gt;エンジニアとしては SAP （ ERP ）やフロントエンド系に携わりつつ、写真では人物を撮らせていただいたり、風景やストリートを撮っています。愛用のカメラは FUJIFILM X-H1/X-T1、RICOH GR/GXR です。&lt;/p&gt;
&lt;p&gt;そんな僕が Gridsome と Tailwindcss の力を借りてポートフォリオサイトを作りました。公開にあわせて写真 2 作品、グラフィック 1 作品を載せいてますので、よかったら見てやってください。&lt;/p&gt;
&lt;h2 id="gridsometailwindcss"&gt;Gridsome と Tailwindcss を使用&lt;/h2&gt;
&lt;h3 id="wordpress"&gt;なじみの WordPress ではなく静的サイトジェネレーター&lt;/h3&gt;
&lt;p&gt;僕はもともと WordPress を使っています。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://nnamm.com" target="_blank"&gt;Takashi Q. Hanamura Photography&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これとは別に、僕の作品をあっちゃこっちゃのサービスに掲載しつつも、総合管理できるサイトがほしくなりました。そう、ポートフォリオサイトですね。&lt;/p&gt;
&lt;p&gt;しかも自分好みのデザインにしたかったので静的サイトジェネレーターの「&lt;a href="https://gridsome.org/" target="_blank"&gt;Gridsome&lt;/a&gt;」と、CSS フレームワークは「&lt;a href="https://tailwindcss.com/" target="_blank"&gt;Tailwindcss&lt;/a&gt; v1.2 系」を使いました。&lt;/p&gt;
&lt;p&gt;僕の好きな Vue.js が使われているし、JavaScript の勉強にもなるし、自由にデザインできる。めっちゃ楽しそう！ということで技術を選定。&lt;/p&gt;
&lt;p&gt;Vue.js のおかげでサクサク画面遷移するのは気持ちいいです（笑）&lt;/p&gt;
&lt;h3 id="_1"&gt;こだわりポイント&lt;/h3&gt;
&lt;p&gt;以下のようなことにこだわっていいます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;心地よい余白&lt;ul&gt;
&lt;li&gt;雑誌のような媒体にしていきたいから。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;フォントは游教科書体 横用&lt;ul&gt;
&lt;li&gt;書体として気持ちいいから。&lt;br/&gt;インストールされてなければ macOS はヒラギノ角ゴシックが、Windows は BIZ UDP ゴシックかメイリオで表示されます。&lt;/li&gt;
&lt;li&gt;【2020.10.3 追記】&lt;br/&gt;ヒラギノ角ゴシックに変更しました。無難なフォントだからこそ、とても見やすいと感じます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;サイトのカラーリングはシンプルに&lt;ul&gt;
&lt;li&gt;作品のサムネイルに目立ってほしいから。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pycharm"&gt;エディタは PyCharm&lt;/h3&gt;
&lt;p&gt;サイトの雛形を作ったときは VSCode を使っていました。&lt;/p&gt;
&lt;p&gt;雛形をベースにポートフォリオサイト開発段階で、購入したばかりの&lt;a href="https://www.jetbrains.com/ja-jp/pycharm/" target="_blank"&gt;PyCharm&lt;/a&gt;に移行。WebStorm に Python 機能がくっついているので Web 開発も充分。ツールに慣れるためにも実戦投入。&lt;/p&gt;
&lt;p&gt;すごく便利なエディタですね。&lt;/p&gt;
&lt;p&gt;さすがに Gridsome 特有のコードはエラーやワーニングになりますが、GitHub にコミットするときに GUI で確認できたり、そのほか開発するための機能がてんこ盛り。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/001_200322-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/001_200322-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/001_200322-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/001_200322-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;ポートフォリオ、スタートです&lt;/h2&gt;
&lt;p&gt;Vue.js や Gridsome のお作法を調べながら作ってきたのでずいぶん時間はかかりましたがようやく形になりました！&lt;/p&gt;
&lt;p&gt;とはいえ、サイトはまだ生まれたばかり。昨今の Web サイトがもつ機能として足りていないものがあります。たとえば&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各ページの OGP 出力（完成）&lt;/li&gt;
&lt;li&gt;robot.txt （完成）&lt;/li&gt;
&lt;li&gt;404 ページ&lt;/li&gt;
&lt;li&gt;アーカイブ画面&lt;/li&gt;
&lt;li&gt;検索機能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;など。&lt;/p&gt;
&lt;p&gt;また、この記事ページだけでも CSS が足りてないですね。これを書いているときにも「もっと見やすくしたい」と思うところがありました。&lt;/p&gt;
&lt;p&gt;でも、そういった課題はつど手を入れていけばよいのです。&lt;strong&gt;さっさとスタートする方がよっぽど大事だから。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;というわけで、&lt;strong&gt;「写真」や「グラフィック」、「ブログ（なるべく技術よりの）」などの作品を掲載しつつ、サイト全体をコツコツと育てていきます。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;どうぞよろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/001_200322-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/001_200322-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/001_200322-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/001_200322-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※vue ファイルなどのデータは &lt;a href="https://github.com/nnamm/gridsome_nnamm" target="_blank"&gt;GitHub&lt;/a&gt; で公開していますので参考にどうぞ。&lt;/p&gt;</content><category term="Diary"/><category term="Gridsome"/><category term="tailwindcss"/></entry></feed>