<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nnamm.work.work - Python</title><link href="/" rel="alternate"/><link href="/feeds/python.rss.xml" rel="self"/><id>/</id><updated>2021-06-19T13:00:00+09:00</updated><subtitle>portfolio note</subtitle><entry><title>Python｜きれいなコードを書くためにPyCharmを設定する</title><link href="/posts/006-write-cleancode-with-pycharm" rel="alternate"/><published>2020-05-18T18:30:00+09:00</published><updated>2020-07-02T09:30:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-05-18:/posts/006-write-cleancode-with-pycharm</id><summary type="html">&lt;p&gt;PyCharm できれいなコードを書くために以下のツールを設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCharm は標準設定でもコードチェックや整形をやってくれます。それに加え、各種ツールを活用してコーディングルールに沿った開発をしていくことが目的です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本記事では、PyCharm にファイル監視機能をつけて、保存のたびにチェックする設定方法をまとめます。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【更新履歴】&lt;/strong&gt;&lt;br&gt;
20.6.28｜isort の設定を変更。multi_line_output に関する設定を削除。import を 1 行表示とするために force_single_line=true を追加。&lt;br&gt;
20.5.27｜isort を追加。flake8 の設定を変更（ 1 行の文字数を 120 → 88 ）。&lt;br&gt;
20.5.21｜flake8 などの設定を見直し&lt;br&gt;
20.5.18｜公開 …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;PyCharm できれいなコードを書くために以下のツールを設定しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCharm は標準設定でもコードチェックや整形をやってくれます。それに加え、各種ツールを活用してコーディングルールに沿った開発をしていくことが目的です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本記事では、PyCharm にファイル監視機能をつけて、保存のたびにチェックする設定方法をまとめます。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【更新履歴】&lt;/strong&gt;&lt;br/&gt;
20.6.28｜isort の設定を変更。multi_line_output に関する設定を削除。import を 1 行表示とするために force_single_line=true を追加。&lt;br/&gt;
20.5.27｜isort を追加。flake8 の設定を変更（ 1 行の文字数を 120 → 88 ）。&lt;br/&gt;
20.5.21｜flake8 などの設定を見直し&lt;br/&gt;
20.5.18｜公開&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="file-watchers"&gt;File Watchers プラグイン（ファイル監視機能）&lt;/h2&gt;
&lt;p&gt;まずはファイルを監視してくれるプラグインを導入します。&lt;/p&gt;
&lt;p&gt;Preferences → Plugins → &lt;code&gt;file watchers&lt;/code&gt;と検索して Go!!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;インストールすると、Preferences → Tools に&lt;code&gt;File Watchers&lt;/code&gt;の項目が追加されます。ここに各種ツールの設定を書きます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="black"&gt;Black （コードフォーマッター）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;Black&lt;/a&gt;は Python3.6 以上で使える超強力なコードフォーマッターです。PEP8 に準拠しているのはもちろん、「より制限のきつい PEP8」と言われている存在。ユーザーからはほとんど設定変更ができないガッチガチ仕様。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://black.readthedocs.io/en/stable/" target="_blank"&gt;The uncompromising code formatter&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;記事投稿時点ではベータ版なので、今後仕様変更される可能性はあります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_1"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;Black の設定は&lt;code&gt;pyproject.toml&lt;/code&gt;を使用します。プロジェクト直下に生成し、1 行の文字数を 88 （ Black デフォルト）にしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;black&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;88&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PyCharm の File Watchers は以下のようにします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Black （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;black --help&lt;/code&gt;やリファレンスを見ながら設定しました。&lt;/p&gt;
&lt;p&gt;「Tool to Run on Changes」は、CUI でコマンド入力する状態を GUI から設定できるってイメージ。Black は標準で&lt;code&gt;pyproject.toml&lt;/code&gt;を読み込むので、引数は Python のファイルパスだけです。&lt;/p&gt;
&lt;h3 id="xxxxxxxxxx"&gt;■$xxxxxxxxxx$について&lt;/h3&gt;
&lt;p&gt;プロジェクトディレクトリなどを表すショートカットです。「Tool to Run on Changes」の各欄の「+」をクリックすると選択できます。&lt;/p&gt;
&lt;h2 id="flake8"&gt;flake8 （静的文法チェックツール）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://flake8.pycqa.org/en/latest/index.html" target="_blank"&gt;flake8&lt;/a&gt;は静的な文法チェックツール。以下をラッパーしており、使っていない変数のチェックなど、「これおかしいよー」という箇所を検出してくれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyFlakes&lt;/li&gt;
&lt;li&gt;pycodestyle&lt;/li&gt;
&lt;li&gt;Ned Batchelder’s McCabe script&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;設定ファイルは一元管理したいので&lt;code&gt;pyproject.toml&lt;/code&gt;に書きます。1 行の文字数を Black に合わせたり、循環的複雑度を設定しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;flake8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;88&lt;/span&gt;
&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;complexity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-4.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-4.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-4.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-4.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;flake8 （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/flake8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--statistics --config $ContentRoot$/pyproject.toml --ignore E203,W503,W504 $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;flake8 --help&lt;/code&gt;やリファレンスを見ながら設定しました。&lt;/p&gt;
&lt;h3 id="ignore"&gt;■ignore の指定について&lt;/h3&gt;
&lt;p&gt;flake8 で特定の警告やエラーを無効にしたい場合は、toml ファイルにこう書きます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ignore = 'E203', 'W503', 'W504'&lt;br/&gt;（ Black との衝突を防ぐコード）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;しかし、なぜか PyCharm ではエラーとなります。toml にエラーがあると他のチェッカーが誤動作しますので、回避策として File Watchers で「--ignore」指定することにしました。（テープルの設定値参照）&lt;/p&gt;
&lt;h2 id="isort"&gt;isort （コードフォーマッター）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://timothycrosley.github.io/isort/" target="_blank"&gt;isort&lt;/a&gt;は import/from 部分を PEP8 に準じてソートしてくれるフォーマッターです。Black はそこまで整形してくれないんですよね。&lt;/p&gt;
&lt;h3 id="_3"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;こちらも&lt;code&gt;pyproject.toml&lt;/code&gt;に書きます。Black との衝突を防ぐために文字数を合わせます。&lt;code&gt;multi_line_output&lt;/code&gt;には複数行になる場合のソート方法を指定します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isort&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;line_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;88&lt;/span&gt;
&lt;span class="nx"&gt;force_single_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mf"&gt;20.6.28&lt;/span&gt; &lt;span class="nx"&gt;以下削除&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;include_trailing_comma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;multi_line_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-8.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-8.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-8.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-8.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;isort （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/isort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;isort --help&lt;/code&gt;でいろいろ確認できます。&lt;/p&gt;
&lt;h3 id="_4"&gt;■ 導入時の注意点&lt;/h3&gt;
&lt;p&gt;isort を普通にインストールすると&lt;code&gt;~/.isort.cfg&lt;/code&gt;を参照します。&lt;code&gt;pyproject.toml&lt;/code&gt;で一元管理するためには&lt;code&gt;pip install 'isort[pyproject]'&lt;/code&gt;とするか、PyCharm からなら&lt;code&gt;Options&lt;/code&gt;に&lt;code&gt;pyporject&lt;/code&gt;を指定すれば OK です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-9.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-9.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-9.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-9.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="mypy"&gt;mypy （静的型ヒントチェッカー）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/python/mypy" target="_blank"&gt;mypy&lt;/a&gt;は静的な型ヒントチェッカーです。flake8 と同じようなもので「適切に型ヒントかけているかな？」という観点でみてくれます。&lt;/p&gt;
&lt;h3 id="_5"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;こちらも&lt;code&gt;pyproject.toml&lt;/code&gt;に書いちゃいます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mypy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;ignore_missing_imports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-5.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-5.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-5.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-5.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;mypy （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/mypy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--config-file $ContentRoot$/pyproject.toml $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;mypy --help&lt;/code&gt;でいろいろ確認できます。&lt;/p&gt;
&lt;h2 id="pylint"&gt;Pylint （静的文法チェックツール）&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.pylint.org/" target="_blank"&gt;Pylint&lt;/a&gt;は静的な文法チェックツールです。flake8 と重複する部分もあるでしょうけど、両方採用して厳しめにチェックしてもいいだろうと。たとえば、flake8 と Pylint で引っ掛かったら、絶対に直すべきポイントだと思います。&lt;/p&gt;
&lt;h3 id="_6"&gt;■ 設定&lt;/h3&gt;
&lt;p&gt;Pylint も&lt;code&gt;pyproject.toml&lt;/code&gt;に設定できますが、&lt;code&gt;.pylintrc&lt;/code&gt;に書くことにしました。&lt;code&gt;pylint --generate-rcfile&lt;/code&gt;するとたくさんの標準設定があり、それらを有効にしておいた方が良いと考えたためです。&lt;/p&gt;
&lt;p&gt;ただ、このままだと多くの変数にたいして「大文字にせぃ」とのたまってきます。変数は小文字が普通だと思うのですが（ですよね？）&lt;/p&gt;
&lt;p&gt;というわけで、「名前について文句ゆーな」という設定や Black との衝突を防ぐための＋ α を&lt;code&gt;.pylintrc&lt;/code&gt;に書き込みます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 設定ファイル生成&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;pylint&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;rcfile&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pylintrc&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;vim&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pylintrc&lt;/span&gt;

&lt;span class="c1"&gt;// [MESSAGES CONTROL]セクションの”disable=”に以下を追記&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;continuation&lt;/span&gt;

&lt;span class="c1"&gt;// [FORMAT]セクションで1行当たりの文字数を他と揃える&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;100&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;88&lt;/span&gt; 

&lt;span class="c1"&gt;// [DESIGN]セクションで最低バブリックメソッド数を変更（必要に応じて）&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-6.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-6.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-6.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-6.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;項目&lt;/th&gt;
&lt;th&gt;設定値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;pylint （任意名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File type&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scope&lt;/td&gt;
&lt;td&gt;Current Fles or Project Files など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;td&gt;$PyInterpreterDirectory$/pylint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arguments&lt;/td&gt;
&lt;td&gt;--rcfile $ContentRoot$/.pylintrc $FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output paths to refresh&lt;/td&gt;
&lt;td&gt;$FilePath$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Working directory&lt;/td&gt;
&lt;td&gt;$ProjectFileDir$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Auto-save edited files to trigger the watcher&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trigger the watcher on external changes&lt;/td&gt;
&lt;td&gt;off&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="pylint_1"&gt;■Pylint は基本的に無効&lt;/h3&gt;
&lt;p&gt;僕の環境では Pylint 処理にほんちょっと時間がかかります。保存のたびに「このちょっと」が気になるので、Pylint の自動処理を無効としておき、折を見て有効にしています。&lt;/p&gt;
&lt;p&gt;有効・無効は File Watchers 設定画面のチェックボックス ON/OFF でできます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;しばらく使ってみたところ、ちょっとした時間はとくに気にならないため常に有効としました。（ 2020.5.21 ）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_7"&gt;設定ファイルはエクスポートしておくと楽&lt;/h2&gt;
&lt;p&gt;これまで設定したものを他のプロジェクトに流用できるよう、設定ファイルのインポート／エクスポート機能があります。&lt;/p&gt;
&lt;p&gt;File Watchers 設定画面の下部にある矢印アイコンがそれ。右上矢印がエクスポート、左下矢印がインポート。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/006_200518-7.jpg" srcset="../../images/posts/derivatives/crisp/1x/006_200518-7.jpg 1x, ../../images/posts/derivatives/crisp/2x/006_200518-7.jpg 2x, ../../images/posts/derivatives/crisp/3x/006_200518-7.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;や&lt;code&gt;.pylintrc&lt;/code&gt;も一緒に保存しておくと非常に楽ですよ。&lt;/p&gt;
&lt;h2 id="_8"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;Python の良い点に「コードの読みやすさ」があります。でも、PEP8 などのルールを無視して書いていたらその良さは活かせません。だから、この手のことは IT の力に任せちゃいましょう。&lt;/p&gt;
&lt;p&gt;今回は PyCharm で設定しましたけど、Visual Studio Code でも同様の設定はできるので、自分の好きなエディタで開発を楽しんでいけばいいと思います。&lt;/p&gt;
&lt;h2 id="_9"&gt;参考にさせていただいた記事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://logmi.jp/tech/articles/322611" target="_blank"&gt;Python 開発を円滑に進めるためのツール設定 Part.1 - ログミー Tech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことの発端となった記事です。実務はこうなのか〜と知って「じゃあ、僕もやってみよう」となったのでした。&lt;/p&gt;
&lt;p&gt;そのほかの参考記事はこちら。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/navitime_tech/items/0a431a2d74c156d0bda2" target="_blank"&gt;black と pylint を使った快適な Python 開発 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hirokiky.org/entry/2019/06/03/202745" target="_blank"&gt;もう Python の細かい書き方で議論しない。black で自動フォーマットしよう - Make 組ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Python"/><category term="PyCharm"/><category term="Python"/></entry><entry><title>Python｜はじめてのunittest、使い方を整理してみる</title><link href="/posts/004-python-first-unittest" rel="alternate"/><published>2020-04-29T17:34:36+09:00</published><updated>2020-05-07T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-04-29:/posts/004-python-first-unittest</id><summary type="html">&lt;p&gt;これまで Python スクリプトを組んできたものの、いずれもユニットテストは未実施。自分仕様ですから「そこまでしなくても」となりがち。でも、実際の現場ではテストは必須。潜在的なバグに気づけますからね。&lt;/p&gt;
&lt;p&gt;実は昨今のテストって仕組みがややこしそう・・・と敬遠してましたが、それではいつまで経ってもレベルアップできませんのでユニットテストにチャレンジしました。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8.2&lt;/li&gt;
&lt;li&gt;テストフレームワーク：&lt;a href="https://docs.python.org/ja/3/library/unittest.html" target="_blank"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テスト対象：&lt;a href="https://github.com/nnamm/md-generator" target="_blank"&gt;md-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考「&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;Python と Automator でブログ執筆環境の自動起動ツールをつくってみた&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/004_200429-a.jpg"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;テストの準備&lt;/h2&gt;
&lt;h3 id="_3"&gt;テストファイルの作成&lt;/h3&gt;
&lt;p&gt;まずはテストファイルを作ります。「test_ + テスト対象モジュール名.py」とするのが習わしなので、「test_gen_md_generator.py」となります。&lt;/p&gt;
&lt;p&gt;コードはこんな感じになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# test_gen_md_generator.py&lt;/span&gt;

&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; md-generator のユニットテストケース &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gen_md_file&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;md …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;これまで Python スクリプトを組んできたものの、いずれもユニットテストは未実施。自分仕様ですから「そこまでしなくても」となりがち。でも、実際の現場ではテストは必須。潜在的なバグに気づけますからね。&lt;/p&gt;
&lt;p&gt;実は昨今のテストって仕組みがややこしそう・・・と敬遠してましたが、それではいつまで経ってもレベルアップできませんのでユニットテストにチャレンジしました。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.8.2&lt;/li&gt;
&lt;li&gt;テストフレームワーク：&lt;a href="https://docs.python.org/ja/3/library/unittest.html" target="_blank"&gt;unittest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テスト対象：&lt;a href="https://github.com/nnamm/md-generator" target="_blank"&gt;md-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考「&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;Python と Automator でブログ執筆環境の自動起動ツールをつくってみた&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-a.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-a.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-a.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-a.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;テストの準備&lt;/h2&gt;
&lt;h3 id="_3"&gt;テストファイルの作成&lt;/h3&gt;
&lt;p&gt;まずはテストファイルを作ります。「test_ + テスト対象モジュール名.py」とするのが習わしなので、「test_gen_md_generator.py」となります。&lt;/p&gt;
&lt;p&gt;コードはこんな感じになりました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# test_gen_md_generator.py&lt;/span&gt;

&lt;span class="sd"&gt;""" md-generator のユニットテストケース """&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gen_md_file&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;md&lt;/span&gt;

&lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"006"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/Users/nnamm.work/Develop/MyProject/_test/006"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"created_date_long"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2020-04-29 15:00:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"created_date_short"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"200429"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"eye_path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"/ec/blog/ec_blog_006.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"slug_str"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"006-200429-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"post_type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"blog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;TEST_ANS_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"006_200429.md"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"img"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GeneratorMdTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;""" テストクラス """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;""" フロントマター情報の確認 """&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertDictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_front_matter_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/Users/nnamm.work/Develop/MyProject/_test/"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;""" ディレクトリとファイル生成の確認 """&lt;/span&gt;

        &lt;span class="c1"&gt;# まずディレクトリとファイルを作成&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_blog_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEST_ANS_DICT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# ディレクトリとファイルが正しく作成されているか確認（詳細な中身は目視確認とする）&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/Users/nnamm/Develop/MyProject/_test/006/"&lt;/span&gt;
        &lt;span class="n"&gt;files_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;files_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertListEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TEST_ANS_LIST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="_4"&gt;テストコードの説明&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;import&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
「unittest」と「テスト対象とモジュール」をインポートして、クラスの中に「def test_XXXXXX」でテストケースを作っていきます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;TEST_ANS_DICT / TEST_ANS_LIST&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
assert で評価される値です。テストケースに定数を書いて良いものか標準的なルールを知らないため、そこらへんはご容赦を。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;setUp() / tearDown()&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
各テストの実施前後にさせたい処理を書きます。たとえば print("Test Start")、print("Test End")としてコンソールログを見やすくしたり、オブジェクトを破棄したりのお掃除系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;def test_create_front_matter_info(self)&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
Front matter を生成する処理で dict が返ります。テスト用のディレクトリを準備し、想定される結果（ TEST_ANS_DICT ）と assertDictEqual しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt;def test_generate_blog_file(self)&lt;/u&gt;&lt;/strong&gt;&lt;br/&gt;
Front matter を含めた md ファイルを生成する処理です。とくに return されるものはなく、ディレクトリとファイルが生成されます。&lt;/p&gt;
&lt;p&gt;さて、ここでは何を確認するべきか？&lt;/p&gt;
&lt;p&gt;想定されたディレクトリ・ファイル構造になったかどうかを評価することにしました。そのために os.listdir()したものを assertListEqual しています。&lt;/p&gt;
&lt;p&gt;実際のファイルは開いて中身を目視確認すればいいでしょう。&lt;/p&gt;
&lt;h2 id="_5"&gt;テストの実行&lt;/h2&gt;
&lt;p&gt;テストコードを PyCharm で走らせてみます。&lt;/p&gt;
&lt;h3 id="edit-configurations"&gt;Edit Configurations&lt;/h3&gt;
&lt;p&gt;Edit Configurations から設定します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Add New Configuration から unittests を選択したら、適当な Name をつけて対象スクリプトを選択して OK します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../../images/posts/004_200429-2.jpg"/&gt;&lt;/p&gt;
&lt;h3 id="run"&gt;Run&lt;/h3&gt;
&lt;p&gt;うまくいけば「Tests passed」が表示されます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;assert で想定した結果にならなかった場合、どこが間違っているか表示されるので修整もやりやすかったです。&lt;/p&gt;
&lt;h2 id="_6"&gt;やって良かったこと&lt;/h2&gt;
&lt;p&gt;潜在的なバグを見つけたことですね。&lt;/p&gt;
&lt;p&gt;具体的には「create_front_matter_info」で「Python list index out of range」が起こる可能性があります。&lt;/p&gt;
&lt;p&gt;この関数にはリストから最後の要素を取り出す処理があります。でも、そもそもリストがなければエラーとなります。僕の環境では起こらないので対処しなくてもいいけれど、せっかくなので該当箇所に try 〜 catch をいれました。&lt;/p&gt;
&lt;p&gt;「改修した」感ゲット（笑）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py（対応前）&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="err"&gt;←&lt;/span&gt; &lt;span class="err"&gt;★&lt;/span&gt;&lt;span class="n"&gt;ここ&lt;/span&gt;
&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;work_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py（対応後）&lt;/span&gt;

&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;work_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dir_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zfill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_path"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;work_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fm_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"new_dir_name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;IndexError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;"作成できません。対象ディレクトリを確認してください。：&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="_7"&gt;不明点&lt;/h2&gt;
&lt;p&gt;datetime で now()を使って現在日時を取得している値の正確性を得るためには、テストケースとしてどうすれば良いかわかりませんでした。普通であれば絶対にイコールになることはないですから。&lt;/p&gt;
&lt;p&gt;しゃーないので、テストのときだけテスト対象のモジュールに任意の日時を指定するロジックを加えて回避しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# gen_md_generator.py&lt;/span&gt;

&lt;span class="c1"&gt;# 新記事の作成日時（long: YYYY-MM-DD HH:MM:SS / short: YYMMDD）&lt;/span&gt;
&lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt; %H:%M:%S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# dt = datetime.datetime(2020, 4, 29, 15).strftime("%Y-%m-%d %H:%M:%S")  # unittest用に日時指定&lt;/span&gt;
&lt;span class="err"&gt;↑★&lt;/span&gt;&lt;span class="n"&gt;ここ&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;テスト時だけコメントアウトする&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;※おそらく unittest.mock を使うのかも。今回は調査していませんので次の課題です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_8"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;初歩の初歩とはいえユニットテストをやり切りました！&lt;/p&gt;
&lt;p&gt;今回得たことは「テストしやすいコードはどうすれば組めるか？」という視点ですね。複雑な処理を重ねてやることもあるでしょうけど、ややこしい処理は分解してシンプルに組めばテストしやすくなるはず。&lt;/p&gt;
&lt;p&gt;テストしやすいということは、コード品質を上げやすいということ。&lt;/p&gt;
&lt;p&gt;だからといって、やたらと分解していいものでもないと思いますので、その塩梅は開発を経験し、センスが磨かれていくことで掴めていくものでしょう。センスはやればやるほど自然と磨かれているものだからね。&lt;/p&gt;
&lt;p&gt;ユニットテスト、いい経験と気づきになりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/004_200429-b.jpg" srcset="../../images/posts/derivatives/crisp/1x/004_200429-b.jpg 1x, ../../images/posts/derivatives/crisp/2x/004_200429-b.jpg 2x, ../../images/posts/derivatives/crisp/3x/004_200429-b.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;※写真は大阪城公園を RICOH GR で撮影&lt;/p&gt;</content><category term="Python"/><category term="Python"/></entry><entry><title>Python｜Pyftpsyncを使ってローカルとリモートを同期する</title><link href="/posts/003-python-ftp-sync" rel="alternate"/><published>2020-04-05T20:30:00+09:00</published><updated>2021-06-19T13:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-04-05:/posts/003-python-ftp-sync</id><summary type="html">&lt;p&gt;静的サイトジェネレーターでサイトを作ると当然のことながら静的ファイルが生成されます。WordPress とは異なり、記事公開までのステップはちょっと手間がかかります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;記事を書く&lt;/li&gt;
&lt;li&gt;ビルドしてサイトデータを生成&lt;/li&gt;
&lt;li&gt;レンタルサーバーにすべてのファイルをアップロード&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;だから、GitHub pages を使っている方もいらっしゃると思います。push とともにデプロイされるのは楽ですからね。&lt;/p&gt;
&lt;p&gt;また、&lt;a href="https://vercel.com/" target="_blank"&gt;Vercel&lt;/a&gt;
を使うのもありでしょう。push とともに専用サーバーにデプロイされますし、独自ドメインを持っていればリダイレクトもできるようです。&lt;/p&gt;
&lt;p&gt;でも、僕はすでに持っている独自ドメインや WordPress で使っているレンタルサーバーがあるのでこれらを流用したい。それじゃあってことで、公開までさくっとやってくれるスクリプトを組みました。&lt;/p&gt;
&lt;p&gt;Pyftpsync ライブラリを使い、&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;前回と同じく&lt;/a&gt;、Automator を使ってアプリケーション化しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/003_200405-1.jpg"&gt;&lt;/p&gt;
&lt;h2 id="pyftpsync"&gt;Pyftpsync とは&lt;/h2&gt;
&lt;p&gt;Martin Wendt さんがつくられている Python ライブラリで&lt;strong&gt;「ローカルとリモートを rsync コマンド風にやってくれるもの」&lt;/strong&gt;と僕は理解しています。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://pyftpsync.readthedocs.io/en/latest/index.html" target="_blank"&gt;Pyftpsync&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ただし、既知の制限があります。最たるものは 2 つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;差分検知はファイルサイズと変更日から判断している&lt;/li&gt;
&lt;li&gt;ローカルフォルダ内に個別のメタデータファイルをつくり、最後の同期時刻とサイズを保存することで差分を検出する …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;静的サイトジェネレーターでサイトを作ると当然のことながら静的ファイルが生成されます。WordPress とは異なり、記事公開までのステップはちょっと手間がかかります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;記事を書く&lt;/li&gt;
&lt;li&gt;ビルドしてサイトデータを生成&lt;/li&gt;
&lt;li&gt;レンタルサーバーにすべてのファイルをアップロード&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;だから、GitHub pages を使っている方もいらっしゃると思います。push とともにデプロイされるのは楽ですからね。&lt;/p&gt;
&lt;p&gt;また、&lt;a href="https://vercel.com/" target="_blank"&gt;Vercel&lt;/a&gt;
を使うのもありでしょう。push とともに専用サーバーにデプロイされますし、独自ドメインを持っていればリダイレクトもできるようです。&lt;/p&gt;
&lt;p&gt;でも、僕はすでに持っている独自ドメインや WordPress で使っているレンタルサーバーがあるのでこれらを流用したい。それじゃあってことで、公開までさくっとやってくれるスクリプトを組みました。&lt;/p&gt;
&lt;p&gt;Pyftpsync ライブラリを使い、&lt;a href="https://nnamm.work/posts/002-startup-blog-writing-env/"&gt;前回と同じく&lt;/a&gt;、Automator を使ってアプリケーション化しています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-1.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-1.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-1.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="pyftpsync"&gt;Pyftpsync とは&lt;/h2&gt;
&lt;p&gt;Martin Wendt さんがつくられている Python ライブラリで&lt;strong&gt;「ローカルとリモートを rsync コマンド風にやってくれるもの」&lt;/strong&gt;と僕は理解しています。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://pyftpsync.readthedocs.io/en/latest/index.html" target="_blank"&gt;Pyftpsync&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ただし、既知の制限があります。最たるものは 2 つ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;差分検知はファイルサイズと変更日から判断している&lt;/li&gt;
&lt;li&gt;ローカルフォルダ内に個別のメタデータファイルをつくり、最後の同期時刻とサイズを保存することで差分を検出する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;このことから Gridsome を使っているとこうなります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 配下の画像ファイルなど同一同名でも「差分あり」となる&lt;/li&gt;
&lt;li&gt;ビルドすると dist 配下のすべてのファイルが全削除＆再生成されるため、上記 2 の効果がない&lt;/li&gt;
&lt;li&gt;結果、ほとんどのファイルがアップロード対象となる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当初の僕の希望である&lt;strong&gt;「rsync コマンドのように差分だけがアップロードされればデプロイも短時間で済むじゃん」&lt;/strong&gt;は達成できませんでした。&lt;/p&gt;
&lt;p&gt;でもメリットもちゃんとあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手動でアップロードするよりだんぜん楽&lt;/strong&gt;ということ。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-2.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-2.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-2.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-2.jpg 3x"/&gt;&lt;/p&gt;
&lt;h2 id="pyftpsync_1"&gt;Pyftpsync の使い方&lt;/h2&gt;
&lt;p&gt;公式のとおりに作ればとてもカンタン。使いやすい設計です。以下は同期モードの例で、他にアップロードモードがあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.ftp_target&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.targets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.synchronizers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;


&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ローカルディレクトリパス"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"リモートディレクトリパス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"FTPサーバーアドレス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FTPアカウント"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"FTPパスワード"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# Trueの場合、FTPSが有効&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# オプション設定例&lt;/span&gt;
&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"resolve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;  &lt;span class="c1"&gt;# コンフリクトした場合はローカルファイルを優先&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# 同期の実行&lt;/span&gt;
&lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※デフォルトではコンソールにログ出力されますので、今何やっているかが分かります。&lt;/p&gt;
&lt;h2 id="_1"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;WordPress や note を使ってきて、「公開までの仕組みがすべてつくられていること」ってすごいことだなと痛感しています。で、ここにきて SSG を使ってのサイト運営ですよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「手間かかることを楽しんでいる」感があります（笑）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;でもね、その結果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;楽するためにどうするか？&lt;/li&gt;
&lt;li&gt;効率化するためできることはあるか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という視点が磨かれてきましたし、なければつくってしまえ、という思考&amp;amp;行動パターンになってきました。エンジニアに復帰した僕としては、これはとても望ましい成長と思っています。&lt;/p&gt;
&lt;p&gt;ひとつひとつ作っていく感覚は楽しいです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/derivatives/crisp/1x/003_200405-3.jpg" srcset="../../images/posts/derivatives/crisp/1x/003_200405-3.jpg 1x, ../../images/posts/derivatives/crisp/2x/003_200405-3.jpg 2x, ../../images/posts/derivatives/crisp/3x/003_200405-3.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;最近はコロナのせいで自宅に籠る時間ができました。だからこそ、思いっきり勉強したり、思いっきり怠惰をむさぼったり、これまでの生活スタイルを進化させられるんじゃないか、と僕は思います。&lt;/p&gt;
&lt;p&gt;たとえば、当たり前と言われているものの反対をやってみて、人間としての幅を広げられたらいいんじゃないかな。&lt;/p&gt;
&lt;p&gt;「より良い未来のために、今できることをする」です。&lt;/p&gt;
&lt;h2 id="sync_gridsomepy"&gt;参考： sync_gridsome.py&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;""" pyftpsyncライブラリを同期モードで使用し、Gridsomeでビルドしたデータ（dist/）をデプロイ先と同期する """&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging.handlers&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.ftp_target&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.targets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.synchronizers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftpsync.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_pyftpsync_logger&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sync_gridsome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    指定のローカルとリモートディレクトリを同期する&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;

    &lt;span class="n"&gt;cfg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ローカルとリモートの設定&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FsTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"LOCAL"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"USER"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;passwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FtpTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"PATH"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"REMOTE"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;# リモートディレクトリパス&lt;/span&gt;
        &lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"FTPS"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"SERVER"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;  &lt;span class="c1"&gt;# FTPサーバ&lt;/span&gt;
        &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# FTPS有効&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# オプション設定&lt;/span&gt;
    &lt;span class="c1"&gt;# ローカル優先／--deleteオプション有効／指定ディレクトリは同期除外&lt;/span&gt;
    &lt;span class="c1"&gt;# opts = {"resolve": "local", "delete": True, "force": True}&lt;/span&gt;
    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"resolve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"local"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# 同期の実行&lt;/span&gt;
    &lt;span class="n"&gt;sync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BiDirSynchronizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ロガーの設定&lt;/span&gt;
    &lt;span class="c1"&gt;# pyftpsync.logにログを残す&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sync.gridsome"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"./pyftpsync.log"&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WatchedFileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;set_pyftpsync_logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# 同期&lt;/span&gt;
    &lt;span class="n"&gt;sync_gridsome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;▶ 最新版は&lt;a href="https://github.com/nnamm/gridsome_sync" target="_blank"&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content><category term="Python"/><category term="macOS"/><category term="Python"/></entry></feed>