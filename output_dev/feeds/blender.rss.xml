<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nnamm.work - Blender</title><link href="/" rel="alternate"/><link href="/feeds/blender.rss.xml" rel="self"/><id>/</id><updated>2022-07-12T00:00:00+09:00</updated><subtitle>portfolio note</subtitle><entry><title>Blender｜CPUとGPU（Metal）のレンダリングパフォーマンス比較</title><link href="/posts/014-cpu-metal-rendering-in-blender" rel="alternate"/><published>2022-07-12T00:00:00+09:00</published><updated>2022-07-12T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2022-07-12:/posts/014-cpu-metal-rendering-in-blender</id><summary type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt; 3.1 から Cycles の GPU レンダリングに &lt;a href="https://developer.apple.com/jp/metal/" target="_blank"&gt;Metal&lt;/a&gt; が選択できるようになりました。v3.2.1 となった現在、動作も安定してきたはず …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt; 3.1 から Cycles の GPU レンダリングに &lt;a href="https://developer.apple.com/jp/metal/" target="_blank"&gt;Metal&lt;/a&gt; が選択できるようになりました。v3.2.1 となった現在、動作も安定してきたはず。そこでデモファイルや手持ちのデータを使ってパフォーマンスを検証してみることに。&lt;/p&gt;
&lt;p&gt;結論からいうと、&lt;strong&gt;僕の環境では CPU only とくらべて、2.2〜2.6 倍ほどレンダリングパフォーマンスが向上しました。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;検証環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Pro 2018 年モデル&lt;ul&gt;
&lt;li&gt;2.6 GHz 6 コア Intel Core i7&lt;/li&gt;
&lt;li&gt;32GB メモリ&lt;/li&gt;
&lt;li&gt;Radeon Pro Vega 20 (4GB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;macOS Monterey 12.4&lt;/li&gt;
&lt;li&gt;Blender 3.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPU レンダリング（ Metal ）に対応しているマシンは、Apple silicon か AMD 製 GPU を搭載しているものになります。対応していれば Preferences に Metal が表示されるはずです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/1.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/1.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/1.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/1.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="metal"&gt;（注） Metal の初回有効時は待たされます&lt;/h3&gt;
&lt;p&gt;はじめて Metal を有効にすると、画面左上に「Loading render kernels」と表示されてしばらく待たされます。Blender がハングしてるわけではないので、5 分程度待つといいですよ。&lt;/p&gt;
&lt;h2 id="_2"&gt;デモファイルのパフォーマンス検証&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.blender.org/download/demo-files/" target="_blank"&gt;Demo Files — blender.org&lt;/a&gt; から Classroom をチョイス。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以降「CPU」と表記したものは上図の Cycles Render Devices を None、「GPU」は Vega 20 のみを ON、「CPU + GPU」は 2 箇所とも ON にしたことを指します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="1cputime-152824"&gt;① CPU ／ Time 15:28.24&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/2.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/2.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/2.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;CPU は全コアが常に 100%でした。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/3.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/3.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/3.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/3.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="2cpu-gputime-63467"&gt;② CPU + GPU ／ Time 6:34.67&lt;/h3&gt;
&lt;p&gt;2.4 倍ほど高速。40%強の時間短縮になりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/4.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/4.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/4.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/4.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;CPU only とくらべて CPU は 100 ％ではないものの、GPU とともに程よく動いていた感じ。挙動の違いが興味深いです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/5.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/5.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/5.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/5.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;確実に性能アップすることがわかったので、自分の作品でも検証してみました。&lt;/p&gt;
&lt;h2 id="_3"&gt;過去作品のパフォーマンス検証&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/6.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/6.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/6.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/6.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Time (mm:ss.ms)&lt;/th&gt;
&lt;th&gt;Peak Mem&lt;/th&gt;
&lt;th&gt;faster than CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;1:44.66&lt;/td&gt;
&lt;td&gt;104.66M&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;0:57.07&lt;/td&gt;
&lt;td&gt;768.18M&lt;/td&gt;
&lt;td&gt;x1.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU + GPU&lt;/td&gt;
&lt;td&gt;0:44.35&lt;/td&gt;
&lt;td&gt;100.96M&lt;/td&gt;
&lt;td&gt;x2.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/7.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/7.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/7.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/7.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Time (mm:ss.ms)&lt;/th&gt;
&lt;th&gt;Peak Mem&lt;/th&gt;
&lt;th&gt;faster than CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;16:16.41&lt;/td&gt;
&lt;td&gt;119.38M&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;9:18.00&lt;/td&gt;
&lt;td&gt;791.34M&lt;/td&gt;
&lt;td&gt;x1.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU + GPU&lt;/td&gt;
&lt;td&gt;7:18.66&lt;/td&gt;
&lt;td&gt;119.37M&lt;/td&gt;
&lt;td&gt;x2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/014/derivatives/crisp/1x/8.jpg" srcset="../../images/posts/014/derivatives/crisp/1x/8.jpg 1x, ../../images/posts/014/derivatives/crisp/2x/8.jpg 2x, ../../images/posts/014/derivatives/crisp/3x/8.jpg 3x"/&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pattern&lt;/th&gt;
&lt;th&gt;Time (mm:ss.ms)&lt;/th&gt;
&lt;th&gt;Peak Mem&lt;/th&gt;
&lt;th&gt;faster than CPU&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;1:24.26&lt;/td&gt;
&lt;td&gt;73.93M&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;0:45.69&lt;/td&gt;
&lt;td&gt;737.04M&lt;/td&gt;
&lt;td&gt;x1.8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU + GPU&lt;/td&gt;
&lt;td&gt;0:32.21&lt;/td&gt;
&lt;td&gt;72.57M&lt;/td&gt;
&lt;td&gt;x2.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;考察&lt;/h2&gt;
&lt;p&gt;Metal によるレンダリング性能を見てきました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;結果的に「CPU + GPU」が一番性能を出せるということがわかりました。&lt;/strong&gt;僕と同じ環境の方は両方 ON にすることをおすすめします。&lt;/p&gt;
&lt;p&gt;検証をふりかえると、CPU や GPU の使われ方が違っていたり、GPU only ではメモリを多く消費するなど挙動の違いがありましたね。おそらく、GPU のメモリが 4GB しかないため、メモリが多く必要なのでしょう。&lt;/p&gt;
&lt;h2 id="_5"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;CG 制作には依然として Windows や Linux の方が向いていると僕は思います。価格、性能、パーツの豊富さなどが理由です。時間は有限ですから、質を上げるために何度も試行錯誤したり、短時間で最終出力をするためにはやはり性能が最優先事項になります。&lt;/p&gt;
&lt;p&gt;でも、Blender で Metal が有効に機能するようになって、macOS でも CG 制作はしやすくなると感じました。用途次第では Mac でも充分楽しめます。&lt;/p&gt;
&lt;p&gt;僕は Metal でレンダリングされるようになって嬉しいです。開発者のみなさんに感謝！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Intel 製の Macbook ではレンダリング時のファンノイズがめっちゃ気になります。Apple Silicon マシンが欲しくなりましたね。&lt;br/&gt;開発する分には困っていませんが、Lightroom Classic がもっさり動くようになってきたのはちょっと辛い。そろそろリプレースに本腰を入れるときかな。&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="Blender"/><category term="macOS"/><category term="Metal"/><category term="Blender"/></entry><entry><title>Blender｜RPR DenoiserとDenoise Nodeの性能を検証する</title><link href="/posts/007-verify-rpr-denoiser-in-blender" rel="alternate"/><published>2020-06-07T20:23:31+09:00</published><updated>2020-06-13T00:10:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2020-06-07:/posts/007-verify-rpr-denoiser-in-blender</id><summary type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt;の新バージョン、2.83 LTS がリリースされました。&lt;/p&gt;
&lt;p&gt;多くのユーザーが新機能や改善点を発信されているなか、僕は&lt;a href="https://www.amd.com/ja/technologies/radeon-prorender-blender" target="_blank"&gt;AMD Padeon …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.blender.org/" target="_blank"&gt;Blender&lt;/a&gt;の新バージョン、2.83 LTS がリリースされました。&lt;/p&gt;
&lt;p&gt;多くのユーザーが新機能や改善点を発信されているなか、僕は&lt;a href="https://www.amd.com/ja/technologies/radeon-prorender-blender" target="_blank"&gt;AMD Padeon ProRender&lt;/a&gt;の話をします。はい、2.83 とかまったく関係ありません（笑）&lt;/p&gt;
&lt;p&gt;僕は Vega20 を積んだ Macbook Pro を使っているので、ProRender のことを調べることが多いです。&lt;a href="https://nnamm.com" target="_blank"&gt;僕の WordPress サイト&lt;/a&gt;でも ProRender の記事がよく読まれています。&lt;/p&gt;
&lt;p&gt;今回は&lt;strong&gt;「ProRender の RPR Denoiser と Blender の Denoise Node はどちらが綺麗にノイズを除去してくれるのかな？」&lt;/strong&gt;を以下 2 つの観点で検証しました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RPR Denoiser （全フィルタ）と Denoise Node ON/OFF で生成される画像とレンダリング時間の違い&lt;/li&gt;
&lt;li&gt;RPR Denoiser （ Bilateral ） ON/OFF の違い&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;結論をいうと&lt;strong&gt;『Denoise Node のみ使う方がいい感じの絵が得られる』&lt;/strong&gt;でした。&lt;/p&gt;
&lt;h2 id="_1"&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Pro 2018 年モデル（ Vega20 ）&lt;/li&gt;
&lt;li&gt;macOS Catalina&lt;/li&gt;
&lt;li&gt;Blender 2.83 LTS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prorender-rpr-denoiser"&gt;ProRender RPR Denoiser&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/1.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/1.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/1.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;2020 年 5 月に ProRender v2.4 系がリリースされました。現段階で 4 種類のデノイズフィルタがあります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bilateral&lt;/li&gt;
&lt;li&gt;Local Weighted Regression&lt;/li&gt;
&lt;li&gt;Edge Avoiding Wavelets&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;v2.4 で macOS の ML Denoising がサポートされたこともあり、いっちょ性能を調べてみようと思ったのです。この記事を書くきっかけですね。&lt;/p&gt;
&lt;h2 id="blender-denoise-node"&gt;Blender Denoise Node&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/2.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/2.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/2.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Blender 2.81 のとき Intel Open Image Denoise を搭載した Node が追加されました。&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://nnamm.com/blog/6564" target="_blank"&gt;Blender｜Intel 製 AI ノイズ除去機能「Intel Open Image Denoiser」を試す – Takashi Q. Hanamura Photography&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノイズ除去させるにはいくつかの設定が必要です。しかし、レンダラーを ProRender に変更するとそれらの設定ができません。でも、Compositing で Render Layers から Denoise Node を通すだけでも効果はあるのでまぁ問題はないでしょう。&lt;/p&gt;
&lt;p&gt;では、以降で検証しますね。ちなみに ON が有効で OFF が無効って意味です。&lt;/p&gt;
&lt;h2 id="1rpr-denoiserdenoise-node-onoff"&gt;【検証 1】RPR Denoiser （全フィルタ）と Denoise Node ON/OFF で生成される画像とレンダリング時間の違い&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;データ：『&lt;a href="https://nnamm.work/posts/g0001-200322-blender-prac-still/"&gt;01. Practice (Still)&lt;/a&gt;』の真ん中あたりの作品&lt;/li&gt;
&lt;li&gt;Resolution ： 1920 x 1080px で出力&lt;/li&gt;
&lt;li&gt;Sampling ： Min/128、Max/256 （そのほかデフォルト設定）&lt;/li&gt;
&lt;li&gt;RPR Denoiser ：すべてデフォルト設定&lt;/li&gt;
&lt;li&gt;カッコ内はレンダリング時間（分 秒 ミリ秒）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="1rpr-denoiseroff-donoise-nodeoff-1m18s33"&gt;① RPR Denoiser(OFF) &amp;amp; Donoise Node(OFF) [1m18s33]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise1_no-RPR-denoiser_1m18s33.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;左手前部分のボケがノイジーです。&lt;/p&gt;
&lt;h3 id="2rpr-denoiseroff-donoise-nodeon-1m20s20"&gt;② RPR Denoiser(OFF) &amp;amp; Donoise Node(ON) [1m20s20]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise6_no-RPR-denoiser-DenoiseNODE_1m20s20.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;①に比べ、左手前部分のボケのノイジーさが緩和されました。最終的に僕のベストはこの設定です。&lt;/p&gt;
&lt;h3 id="3rpr-denoiserbilateral-donoise-nodeoff-1m19s29"&gt;③ RPR Denoiser(Bilateral) &amp;amp; Donoise Node(OFF) [1m19s29]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise2_Bilateral_1m19s29.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise2_Bilateral_1m19s29.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise2_Bilateral_1m19s29.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise2_Bilateral_1m19s29.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="4rpr-denoiserbilateral-donoise-nodeon-1m21s23"&gt;④ RPR Denoiser(Bilateral) &amp;amp; Donoise Node(ON) [1m21s23]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise7_Bilateral-DenoseNODE_1m21s23.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;③と④はどちらもあまり変わらない感じ。③の場合、中心付近に赤い斑点が目立ちますが、Denoise Node ON にすると消えます。&lt;/p&gt;
&lt;h3 id="5rpr-denoiserlocal-weighted-regression-donoise-nodeoff-1m21s71"&gt;⑤ RPR Denoiser(Local Weighted Regression) &amp;amp; Donoise Node(OFF) [1m21s71]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise3_Local-Weighted-Regression_1m21s71.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="6rpr-denoiserlocal-weighted-regression-donoise-nodeon-1m23s99"&gt;⑥ RPR Denoiser(Local Weighted Regression) &amp;amp; Donoise Node(ON) [1m23s99]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise8_Local-Weighted-Regression-DenoseNODE_1m23s99.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;③と④と同じ感想です。僕は Bilateral の方が好み。&lt;/p&gt;
&lt;h3 id="7rpr-denoiseredge-avoiding-wavelets-donoise-nodeoff-1m19s51"&gt;⑦ RPR Denoiser(Edge Avoiding Wavelets) &amp;amp; Donoise Node(OFF) [1m19s51]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise4_Edge-Avoiding-Wavelets_1m19s51.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="8rpr-denoiseredge-avoiding-wavelets-donoise-nodeon-1m21s15"&gt;⑧ RPR Denoiser(Edge Avoiding Wavelets) &amp;amp; Donoise Node(ON) [1m21s15]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise9_Edge-Avoiding-Wavelets-DenoseNODE_1m21s15.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;Edge Avoiding Wavelets フィルタは独特です。ON にすると表面が流れているようになって、正直「え？これありなの？」と思ったくらいです。これが活かせるシーンはあるのでしょうけど、僕はわからなかったです。&lt;/p&gt;
&lt;h3 id="9rpr-denoisermachine-learning-donoise-nodeoff-1m22s65"&gt;⑨ RPR Denoiser(Machine Learning) &amp;amp; Donoise Node(OFF) [1m22s65]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise5_Machine-Learning-AOVoff_1m22s65.jpg 3x"/&gt;&lt;/p&gt;
&lt;h3 id="10rpr-denoisermachine-learning-donoise-nodeon-1m25s94"&gt;⑩ RPR Denoiser(Machine Learning) &amp;amp; Donoise Node(ON) [1m25s94]&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_1_denoise10_Machine-Learning-DenoseNODE_1m25s94.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;⑨も⑩もノイズ除去はいい感じだと思います。ただ、赤い斑点が消えませんでした。となると設定したテクスチャなどが影響していたりするのかもです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;※Machine Learning について&lt;br/&gt;
Use Color AOV only というチェックボックスがあるのですが、ON にするとなぜか真っ暗画像がレンダリングされてしまうため OFF にしました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="_2"&gt;レンダリング時間比較表（速い順）&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;パターン No.&lt;/th&gt;
&lt;th align="center"&gt;RPR Deniser&lt;/th&gt;
&lt;th align="center"&gt;Denoise Node&lt;/th&gt;
&lt;th align="center"&gt;レンダリング時間&lt;/th&gt;
&lt;th align="center"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;①&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m18s33&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;③&lt;/td&gt;
&lt;td align="center"&gt;Bilateral&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m19s29&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑦&lt;/td&gt;
&lt;td align="center"&gt;Edge Avoiding&lt;br/&gt;Wavelets&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m19s51&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;②&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m20s20&lt;/td&gt;
&lt;td align="center"&gt;★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑧&lt;/td&gt;
&lt;td align="center"&gt;Edge Avoiding&lt;br/&gt;Wavelets&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m21s15&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;④&lt;/td&gt;
&lt;td align="center"&gt;Bilateral&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m21s23&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑤&lt;/td&gt;
&lt;td align="center"&gt;Local Weighted&lt;br/&gt;Regression&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m21s71&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑨&lt;/td&gt;
&lt;td align="center"&gt;Machine Learning&lt;/td&gt;
&lt;td align="center"&gt;OFF&lt;/td&gt;
&lt;td align="center"&gt;1m22s65&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑥&lt;/td&gt;
&lt;td align="center"&gt;Local Weighted&lt;br/&gt;Regression&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m23s99&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;⑩&lt;/td&gt;
&lt;td align="center"&gt;Machine Learning&lt;/td&gt;
&lt;td align="center"&gt;ON&lt;/td&gt;
&lt;td align="center"&gt;1m25s94&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;レンダリングは 1 回しかしていませんし、検証はこのシーンデータでしかしていません。サンプルは少ないですが、基本指針としては★で良いんじゃないかな、という結論です。&lt;/p&gt;
&lt;h2 id="2rpr-denoiserbilateralonoff"&gt;【検証 2】RPR Denoiser （ Bilateral ） ON/OFF の違い&lt;/h2&gt;
&lt;p&gt;ここでは RPR Denoiser の各フィルタのうち、僕の好みの Bilateral を見てみます。もっと単純なシーンを使って、ON/OFF でどんな効果があるのか。なお、Denoise Node は常に ON です。&lt;/p&gt;
&lt;p&gt;結論をいうと、&lt;strong&gt;Bilateral ON にすると画像が眠くなりました。シャープさが損なわれた感じです。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ：すごく適当でシンプルなシーンデータ&lt;/li&gt;
&lt;li&gt;Sampling ： Min/64、Max/128 （そのほかデフォルト設定）&lt;/li&gt;
&lt;li&gt;RPR Denoiser ： Bilateral （デフォルト設定）&lt;/li&gt;
&lt;li&gt;Denoise Node ： ON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;▼RPR Denoiser - Bilateral ON&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_2_bilateral-on-denoisenode-on.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_2_bilateral-on-denoisenode-on.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_2_bilateral-on-denoisenode-on.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_2_bilateral-on-denoisenode-on.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;▼RPR Denoiser - Bilateral OFF&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/007/derivatives/crisp/1x/007_2_bilateral-off-denoisenode-on.jpg" srcset="../../images/posts/007/derivatives/crisp/1x/007_2_bilateral-off-denoisenode-on.jpg 1x, ../../images/posts/007/derivatives/crisp/2x/007_2_bilateral-off-denoisenode-on.jpg 2x, ../../images/posts/007/derivatives/crisp/3x/007_2_bilateral-off-denoisenode-on.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;PC で見るとわかるのですが、中心の青い球体のエッジが Bilateral ON にすると眠くなっているように僕は感じます。&lt;/p&gt;
&lt;h2 id="_3"&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ProRender を使うときは RPR Denoiser ではなく、Blender 標準の Denoise Node を使いましょう。得られる結果の期待値は高いと思われます。&lt;/p&gt;
&lt;p&gt;Denoise Node も RPR Denoiser も少ないサンプル数でレンダリング時間を短縮し、なおかつ綺麗な画像を生成するためのものです。Machine Learning が取り入れられたりして、これからもどんどん改善されていくはずです。&lt;/p&gt;
&lt;p&gt;技術は進歩していき、きっと楽にデノイズできる日は来るでしょうけど、常に試行錯誤は必要だろうな〜と思いました。&lt;/p&gt;
&lt;h2 id="_4"&gt;公式ドキュメント&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://radeon-pro.github.io/RadeonProRenderDocs/index.html" target="_blank"&gt;Welcome to AMD Radeon™ ProRender! — AMD Radeon ProRender&lt;/a&gt;&lt;/p&gt;</content><category term="Blender"/><category term="Blender"/><category term="macOS"/></entry></feed>