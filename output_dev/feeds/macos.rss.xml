<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>nnamm.work - macOS</title><link href="/" rel="alternate"/><link href="/feeds/macos.rss.xml" rel="self"/><id>/</id><updated>2022-06-19T17:07:17+09:00</updated><subtitle>portfolio note</subtitle><entry><title>Parallelsにポートフォワードの設定を追加する</title><link href="/posts/013-port-forward-to-vm" rel="alternate"/><published>2022-06-19T17:07:17+09:00</published><updated>2022-06-19T17:07:17+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2022-06-19:/posts/013-port-forward-to-vm</id><summary type="html">&lt;p&gt;Parallels を使ってクライアント・サーバー構成で開発している方はこの設定が必要になるかもしれません。&lt;/p&gt;
&lt;p&gt;バージョンは …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Parallels を使ってクライアント・サーバー構成で開発している方はこの設定が必要になるかもしれません。&lt;/p&gt;
&lt;p&gt;バージョンは Parallels Desktop 17 です。&lt;/p&gt;
&lt;h2 id="_1"&gt;ことのはじめ&lt;/h2&gt;
&lt;p&gt;以前、フロントエンドに &lt;a href="https://svelte.dev/" target="_blank"&gt;Svelte&lt;/a&gt;、バックエンドに &lt;a href="https://fastapi.tiangolo.com/" target="_blank"&gt;FastAPI&lt;/a&gt; を用いてパスワードを生成するアプリを作りました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/1.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/1.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/1.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/1.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;▶︎ &lt;a href="https://github.com/nnamm/PasswordGenerator" target="_blank"&gt;https://github.com/nnamm/PasswordGenerator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;動作イメージとしては下図の「1Password mini」で、スライドバーの動作に合わせてパスワードを生成します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/2.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/2.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/2.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/2.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;もちろん、パスワードを生成するだけならフロントエンド／バックエンド構成にする必要はありません。JavaScript や Python だけでできるでしょうし。&lt;/p&gt;
&lt;p&gt;でも、今回は&lt;strong&gt;「フロントとバックを分けて開発したい（ Web API やりたい）」&lt;/strong&gt;ので分けてみました。バックエンドは AWS などにデプロイするテイで Kuntu on Parallels を使いました。&lt;/p&gt;
&lt;h3 id="_2"&gt;構成&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;OS&lt;/th&gt;
&lt;th&gt;Tech stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Frontend&lt;/td&gt;
&lt;td&gt;macOS&lt;/td&gt;
&lt;td&gt;Svelte （当時は V2 系）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Backend&lt;/td&gt;
&lt;td&gt;Kubuntu&lt;/td&gt;
&lt;td&gt;Kubuntu&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;実際にデプロイしたら、ローカルで実行するより遅延はあるのだろうとは思いますが、「作りたいテーマであること」と「WebAPI やりたい」を優先した構成です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_3"&gt;起動するもリクエストがサーバーに届かない&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/3.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/3.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/3.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/3.jpg 3x"/&gt;&lt;/p&gt;
&lt;div style="text-align: center;"&gt;左：macOS／右：Kubuntu&lt;br/&gt;（iTerm2 + neovim + tmux）&lt;/div&gt;
&lt;p&gt;Svelte/FastAPI のコードを書いて、それぞれ起動していざリクエストしてみたところ・・・サーバーが反応していないぞ？&lt;/p&gt;
&lt;p&gt;調べてみると&lt;strong&gt;「ポートフォワーディングしないといけない」&lt;/strong&gt;ということがわかりました。&lt;/p&gt;
&lt;p&gt;そりゃそうですよね。&lt;/p&gt;
&lt;p&gt;macOS からの HTTP リクエスト（ポート 80 ）を、Kbuntu で&lt;code&gt;uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload&lt;/code&gt;したポート 8000 に渡してあげないといけませんから。&lt;/p&gt;
&lt;p&gt;というわけで、Parallels にポートフォワーディングルールを追加します。&lt;/p&gt;
&lt;h2 id="parallels"&gt;Parallels のポートフォワード設定方法&lt;/h2&gt;
&lt;p&gt;①設定を開きます（&lt;code&gt;⌘+,&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;②ネットワーク → Shared → 「＋」をクリックします&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/4.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/4.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/4.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/4.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;③以下を入力します&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソースポート： macOS からのリクエストポート番号&lt;/li&gt;
&lt;li&gt;転送先： VM の IP address （ VM 側の Terminal で"ip a"するとわかります）&lt;/li&gt;
&lt;li&gt;宛先ポート： uvicorn で指定したポート番号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/5.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/5.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/5.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/5.jpg 3x"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;試していませんが、転送先に VM 名を指定できそうですね。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;④ポートフォワーディングルールが追加されたら OK&lt;/p&gt;
&lt;p&gt;&lt;img alt="" class="image-process-crisp" loading="lazy" src="../../images/posts/013/derivatives/crisp/1x/6.jpg" srcset="../../images/posts/013/derivatives/crisp/1x/6.jpg 1x, ../../images/posts/013/derivatives/crisp/2x/6.jpg 2x, ../../images/posts/013/derivatives/crisp/3x/6.jpg 3x"/&gt;&lt;/p&gt;
&lt;p&gt;これで動くようになりました！&lt;/p&gt;</content><category term="macOS"/><category term="Parallels"/></entry><entry><title>iCloud Driveは何でもかんでも同期されるわけじゃないのね</title><link href="/posts/009-be-careful-files-sync-by-icloud" rel="alternate"/><published>2021-05-30T00:00:00+09:00</published><updated>2021-05-30T00:00:00+09:00</updated><author><name>花村貴史 / Takashi Hanamura</name></author><id>tag:None,2021-05-30:/posts/009-be-careful-files-sync-by-icloud</id><summary type="html">&lt;p&gt;今回はデータ管理についての備忘録です。最終的に記事タイトルのことに行き着いた、失敗から得た学びです。&lt;/p&gt;
&lt;p&gt;僕は開 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今回はデータ管理についての備忘録です。最終的に記事タイトルのことに行き着いた、失敗から得た学びです。&lt;/p&gt;
&lt;p&gt;僕は開発系のデータを含めて、ざっくりした作業ディレクトリを作っています。Coding とか Photo とか。それらを定期的に外部ストレージにバックアップ。プロジェクトによっては GitHub でも管理します。&lt;/p&gt;
&lt;p&gt;ある日、データ管理について考えることがありました。&lt;/p&gt;
&lt;h2 id="_1"&gt;我、名案、閃キ&lt;/h2&gt;
&lt;p&gt;ふと思ったのです。&lt;/p&gt;
&lt;p&gt;開発系データを iCloud Drive （正確には macOS の Documents ディレクトリ）に移動したら 2 重で保存されていいじゃーん！&lt;/p&gt;
&lt;p&gt;そんなわけで嬉々としてフォルダを移動しました。ただ、完全同期されるまで 1 日じゃ終わりませんでした。&lt;/p&gt;
&lt;p&gt;どうやら 1 万や 10 万といった大量ファイルの同期リクエストがなされると、ファイルサイズに関わらず、とてつもなく時間がかかるようです。調べてみると、これは Dropbox でも同様でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;venv 環境や node_modules 群といったものまであったので、そりゃもう大量のファイルがありました・・・&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_2"&gt;「.」で始まるファイルがなくなってる&lt;/h2&gt;
&lt;p&gt;さて、同期もおわり Terminal でのぞいてみると「.git」や「.gitignore」、「.eslintrc.js」などがことごとくない！！&lt;/p&gt;
&lt;p&gt;どうも iCloud Drive の仕様で、何でもかんでも同期されるわけじゃないようですね。Stack Overflow や Apple のサイトをみるに、そのことが書かれていました。&lt;/p&gt;
&lt;h2 id="_3"&gt;情報源&lt;/h2&gt;
&lt;h3 id="icloud-drive-faq-apple-support"&gt;&lt;a href="https://support.apple.com/en-us/HT201104" target="_blank"&gt;iCloud Drive FAQ - Apple Support&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;「What types of files can I store in iCloud Drive?」の項には、こう書かれしいます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You shouldn't store app folders, libraries, or .tmp files in iCloud Drive.&lt;br/&gt;&lt;br/&gt;
アプリフォルダー、ライブラリ、または.tmp ファイルを iCloud ドライブに保存しないでください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="github-can-git-and-icloud-drive-be-effectively-used-together-stack-overflow"&gt;&lt;a href="https://stackoverflow.com/questions/35853139/can-git-and-icloud-drive-be-effectively-used-together/51253959#51253959" target="_blank"&gt;github - Can Git and iCloud Drive be effectively used together? - Stack Overflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;「.git」はアプリフォルダー扱いとのこと。&lt;/p&gt;
&lt;h3 id="how-to-exclude-a-sub-folder-from-icloud-drive-in-macos-sierra-ask-different"&gt;&lt;a href="https://apple.stackexchange.com/questions/254313/how-to-exclude-a-sub-folder-from-icloud-drive-in-macos-sierra/295929#295929" target="_blank"&gt;How to exclude a sub folder from iCloud drive in macOS Sierra? - Ask Different&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;こちらには具体的にどんなファイルが同期されないかがリストアップされてました。以下、Stack Overflow から拝借。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Filename:&lt;/strong&gt;&lt;br/&gt;
    is .DS_Store&lt;br/&gt;
    begins with (A Document Being Saved&lt;br/&gt;
    contains .nosync (in any case)&lt;br/&gt;
    is .ubd&lt;br/&gt;
    contains .weakpkg&lt;br/&gt;
    is tmp (in any case)&lt;br/&gt;
    is .tmp (in any case)&lt;br/&gt;
    is desktop.ini (in any case)&lt;br/&gt;
    begins with ~$&lt;br/&gt;
    is Microsoft User Data (in any case)&lt;br/&gt;
    is $RECYCLE.BIN (in any case)&lt;br/&gt;
    is iPhoto Library (in any case)&lt;br/&gt;
    is Dropbox (in any case)&lt;br/&gt;
    is OneDrive (in any case)&lt;br/&gt;
    is IDrive-Sync (in any case)&lt;br/&gt;
    is .dropbox (in any case)&lt;br/&gt;
    is .dropbox.attr (in any case)&lt;br/&gt;
    is icon\r (in any case)&lt;br/&gt;
&lt;br/&gt;
&lt;strong&gt;Extension is (in any case):&lt;/strong&gt;&lt;br/&gt;
    tmp&lt;br/&gt;
    photoslibrary&lt;br/&gt;
    photolibrary&lt;br/&gt;
    aplibrary&lt;br/&gt;
    migratedaplibrary&lt;br/&gt;
    migratedphotolibrary&lt;br/&gt;
    migratedaperturelibrary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_4"&gt;おわりに&lt;/h2&gt;
&lt;p&gt;iCloud Drive はたいていの場合は普通のストレージとして使えますが、物理ストレージと同じではないってことですね。認識を新たにしないと。&lt;/p&gt;
&lt;p&gt;現在、クラウドが広がり、あたりまえになっています。使いようによっては手間のかからないバックアップ手段ともなりますが、物理ストレージではありません。&lt;/p&gt;
&lt;p&gt;僕の用途としては写真ファイルもありますから、物理的なバックアップはまだまだ必要だと思うのでした。&lt;/p&gt;</content><category term="macOS"/><category term="macOS"/><category term="iCloud"/><category term="Apple"/></entry></feed>